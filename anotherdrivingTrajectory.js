$(function(){	//实例化地图，显示轨迹	drivingTrajectory.init();	//实例化按钮	drivingTrajectory._initTimeBarBtn();})//定义一个轨迹播放对象function TrajectoryRunning(pointInfoArr,map){	this._pointInfoArr = pointInfoArr;	this._map = map;	this._pointIndex = 0;	this._linePointArr = new Array();	if(drivingTrajectory.speedChart!=null){		//定义速度数组		this._speedPointArr = new Array();	}	}//定义TrajectoryRunning属性resetTrajectoryRunning.prototype.reset = function(){	this.resetIndex();	drivingTrajectory.clearOverlays();	var pointInfoArr = this._pointInfoArr;	drivingTrajectory._drawingMapTrajectoryLine(pointInfoArr);	drivingTrajectory._drawingMapTrajectoryMarker(pointInfoArr);	if(drivingTrajectory.speedChart!=null){		//速度曲线		drivingTrajectory.drawingSpeedCharts(pointInfoArr);	}	//进度条	$(".ui-slider-range").css("width","100%");	$(".ui-slider-handle").css("left","0%");	//实时车速	$("#carSpeed").html("0km/h");};//定义TrajectoryRunning属性resetIndexTrajectoryRunning.prototype.resetIndex = function(){	this._pointIndex = 0;	this._linePointArr = new Array();	if(drivingTrajectory.speedChart!=null){		//定义速度数组		this._speedPointArr = new Array();	}};//定义轨迹回放方法(画点)TrajectoryRunning.prototype.gotoNextPoint = function(){	function createLinePoint(pointInfo,type){		var point = new BMap.Point(parseFloat(pointInfo.lng),parseFloat(pointInfo.lat));		var markerIcon = new BMap.Icon(ctx + ((type == 'begin') ? "/img/map/start_icon.png" : "/img/map/end_icon.png"), new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});		var marker = new BMap.Marker(point,{icon:markerIcon});		map.addOverlay(marker); 	}	var map = this._map;	var pointInfoArr = this._pointInfoArr;	var pointIndex = this._pointIndex;	var linePointArr = this._linePointArr;	var isLast = false;	map.clearOverlays();	//曲线同步    var speedPointArr = this._speedPointArr;    //轨迹变动	if(pointIndex < pointInfoArr.length ){		var pointInfo = pointInfoArr[pointIndex];		//实时车速		$("#carSpeed").html(pointInfo.speed+"km/h");		var pt = new BMap.Point(parseFloat(pointInfo.lng),parseFloat(pointInfo.lat)),			degree = getCarDegree(pointInfo.direction),			carIcon = new BMap.Icon(ctx+"/img/map/car_driving_"+degree+".png", new BMap.Size(35,35)),			marker = new BMap.Marker(pt,{icon:carIcon});        map.addOverlay(marker);        map.setCenter(pt);	    if( pointIndex == 0){	    	 map.setZoom(13);	    }        linePointArr.push(pt);                if(drivingTrajectory.speedChart!=null){    		//定义速度数组    		var speedJson = {};    		var speed = pointInfoArr[pointIndex].speed;    		speedJson = {y:speed};    		speedPointArr.push(speedJson);    	}        		this._pointIndex++;		isLast = false;	}else{		createLinePoint(pointInfoArr[linePointArr.length - 1],'end');		//this.reset();		isLast = true;	}	createLinePoint(pointInfoArr[0],'begin');    if(linePointArr.length > 1){    	var routeline = new BMap.Polyline(linePointArr, {strokeColor:"#0000ff", strokeWeight:4, strokeOpacity:0.8});		map.addOverlay(routeline);		    }    //速度曲线同步    if(drivingTrajectory.speedChart!=null&&speedPointArr.length > 1){			drivingTrajectory.speedChart.series[0].setData(speedPointArr);	}    //进度条    var handle_percent = (pointIndex/pointInfoArr.length)*100+"%";    var range_width = (1-(pointIndex/pointInfoArr.length))*100+"%";	$(".ui-slider-range").css("width",range_width);	$(".ui-slider-handle").css("left",handle_percent);    return isLast;};//弹出框function OpenInfoWindowsEvent(carMapInfo,marker){	this._carMapInfo = carMapInfo;	this._marker = marker;	this._handlerUndefined = function(value){		return isNotNull(value) ? value : '暂无';	}}//定义全局对象var drivingTrajectory = {	_mapObj : null,	_gc : null,		//全部轨迹点	_drivingTrajectoryDataArr : null,	//全部告警点	_trajectoryAlarmPointArr : null,	//当天统计数据	_statisticsData : null,	//行程属性分组	_tripDataArr : null,	_tripParagraphMap : {},	trajectoryRunning : null,		_pointMarkers : [],	timer : null,	speedChart : null,	getTrajectoryAlarmPointArr : function(){		return this._trajectoryAlarmPointArr;	},	getDrivingTrajectoryDataArr : function(){		return this._drivingTrajectoryDataArr;	},	getTripDataArr : function(){		return this._tripDataArr;	},	setStatisticsData : function(statisticsData){		this._statisticsData = statisticsData;	},	getStatisticsData : function(){		return this._statisticsData;	},	//初始化	init : function(){		window._driverId = $("#driverId").val();		window._today =$("#today").val();		window.clientHeight = document.body.clientHeight;		window.clientWidth = document.body.clientWidth;		this.setHeight();				this.initMap("mapParent");		//获取当天轨迹		/**2016-04-19将方法放入实例化地图定位当前城市的异步返回结果内部，保证能定位到当前城市**///		this.showDriverDrivingTrajectory(_driverId,_today);				//查询绑定事件		$("#searchBtn").click(function(){			var queryDate = $("#queryDate").val();			$("#today").val(queryDate);			window._today = queryDate;			//刷新轨迹导出参数			$("#startTime").val(queryDate+" 00:00:00");			$("#stopTime").val(queryDate+" 23:59:59");						//获取当天轨迹			drivingTrajectory.showDriverDrivingTrajectory(_driverId,_today);		});		//查询绑定事件		$(".punchcard button").click(function(){			$('.punchcard').children('a').children('button').removeClass('active');			$(this).addClass('active');		});		//默认选择某天	    layui.use('laydate', function(){	        var laydate = layui.laydate;	        laydate.render({	            elem: '#queryDate'	        });	    });	},	//设置高度	setHeight : function(){		//prevAll()		$('#mapParent').css('height',clientHeight + "px");		$('#behaviorListDiv').css('height',(clientHeight - 60) + "px");		$('#mapParent').parent('div .row-fluid').css('height',clientHeight + "px");		$('#playDiv').css('top',(clientHeight + 800) + "px");	},	//实例化地图	initMap : function(divId){		this._gc = new BMap.Geocoder();		var map = this._mapObj = new BMap.Map(divId, {enableMapClick:false}); //在百度地图容器中创建一个地图	    map.centerAndZoom("北京",5);     	    map.enableScrollWheelZoom(true);  	    map.addControl(new BMap.NavigationControl()); 	    map.setMinZoom(5);     	map.setMaxZoom(15);    	//获取当前IP所在城市并设置中心点为该城市    	function setCityCenter(result){			var cityName = result.name;			if(cityName && cityName != ''){				map.centerAndZoom(cityName,6);     			}			//获取当天轨迹			/**2016-04-19将方法放入实例化地图定位当前城市的异步返回结果内部，保证能定位到当前城市**/			drivingTrajectory.showDriverDrivingTrajectory(_driverId,_today);		}		var myCity = new BMap.LocalCity();		myCity.get(setCityCenter);	},	//地图清除方法	clearOverlays : function (){		if(this._mapObj != null){			this._mapObj.clearOverlays();			$("#clearAllPoint").hide();			$("#showAllPoint").show();		}	},	//ajax向后台取点熄火数据	showDriverDrivingTrajectory : function(driverId,today){		$.ajax({			url : ctx + '/resourcesManage/driver/driverTrajectory/getDriverDrivingTrajectoryOfToday.do',			type : 'POST',			data : {				driverId : driverId,				today : today			},			dataType : 'JSON', 			cache : false,			beforeSend : function(){				showPicture();			},			success : function(data){				if(data.states == 200){					drivingTrajectory.clearOverlays();						//封装点数据					drivingTrajectory.new_handlerDrivingTrajectoryDataArr(data.trajectoryList);					//渲染时间轴					drivingTrajectory.new_showTripTimeBar(data.routeSections);					//画出轨迹线					drivingTrajectory.trajectoryRunning = drivingTrajectory.drawingAllDrivingTrajectory();					//显示统计					drivingTrajectory.setStatisticsData(data.statisticsData);					drivingTrajectory._refreshTrackInfoDivInfo(data.statisticsData);										//显示当天轨迹分段					drivingTrajectory.drawingBehaviorList('behaviorListDiv',data.trajectoryList);				}else{					alertMessage("查询司机行车轨迹信息出错，请联系管理员！",0);				}				closePicture();			}		});	},	//新方法_封装数据	new_handlerDrivingTrajectoryDataArr : function(dataArr){		var filteredPointInfoArr = new Array(),			tripParagraphArr = new Array(),			alarmPointArr = new Array(),			tripAlarmArr = new Array(),			tripDataArr = new Array();		 //倒序		this._tripParagraphMap={};		 for(var i=0; i < dataArr.length; i++){			 var pointList = dataArr[i].pointList;			 var tempPointList = [];			 //总轨迹点			 for(var j=pointList.length-1;j>=0;j--){			 	var pointInfo = pointList[j];			 	if(pointInfo.lat!=undefined&&pointInfo.lng!=undefined){			 		filteredPointInfoArr.push(pointInfo);			 	} 				 }			//分段轨迹点			 for(var k=0;k<pointList.length;k++){				 	var pointInfo_1 = pointList[k];				 	if(pointInfo_1.lat!=undefined&&pointInfo_1.lng!=undefined){				 		tempPointList.push(pointInfo_1);				 	} 					 }			 			 tripParagraphArr.push(pointList);			 //告警点			 var alarmList = dataArr[i].alarmList; 			 for(var k=0;k<alarmList.length-1;k++){				 	var alarmInfo = alarmList[k];				 	alarmPointArr.push(alarmInfo);				 }			 this._tripParagraphMap[dataArr[i].travelId] = tempPointList;			 tripAlarmArr.push(alarmList);			 //分段轨迹对象			 tripDataArr.push(dataArr[i]);		 }		this._drivingTrajectoryDataArr = filteredPointInfoArr;		this._tripParagraphArr = tripParagraphArr;		this._trajectoryAlarmPointArr = alarmPointArr;		this._tripAlarmArr = tripAlarmArr;		this._tripDataArr = tripDataArr;	},	//新方法_渲染时间轴	new_showTripTimeBar : function(times){		function handlerUndefined(value){			return (value == undefined || (!isNotNull(value)) ? '暂无' : value);		}		var allSecondOfDay = 24 * 60 * 60,			timeBarHtml = new Array();			trajectoryAlarmPointArr = drivingTrajectory.getTrajectoryAlarmPointArr();		//生成时间轴DIV		var baseHtml = '<div class="progress {cls}" style="width: {width}%; float: left" title="{title}" beginDate="{beginDate}" endDate="{endDate}" accState="{accState}" arrIndex="{index}"><div class="bar" style="width: 100%;"></div></div>',			alarmHtml = '<a data-content="{content}" class="alarm alarm-{alarmType}" data-title="{title}" style="left: {left}%;" data-lng="{lng}" data-lat={lat}></a>',			widthRatioCount = 0;		for(var i=0 ; i < times.length; i++){			var time = times[i];			var widthRatio = 0;			if(i == (times.length - 1)){				widthRatio = 100 - widthRatioCount;			}else{				var secondDifference = daysBetween(time.startTimeStr,time.endTimeStr,'ss');				widthRatio = (secondDifference / allSecondOfDay).toFixed(8) * 100;				widthRatioCount += widthRatio;			}			timeBarHtml.push(baseHtml.format({				width : widthRatio,				accState : (time.isDriving == 2) ? 'off' : 'on',				index : time.index,				beginDate: time.startTimeStr,				endDate: time.endTimeStr,				cls : (time.isDriving == 2) ? 'progress-info' : 'progress-warning',				title : dateFormat(time.startTimeStr,'hh:mm:ss') + '~' + dateFormat(time.endTimeStr,'hh:mm:ss')			}));			//最后一段行程的时候判断是否跨天,是跨天则修改时间轴结束时间			if(time.isOverDay==1){				$("#end_timeBar").html('(+1)'+dateFormat(time.endTimeStr,'hh:mm:ss'));			}		}		for(var i=0 ; i < trajectoryAlarmPointArr.length; i++){			var trajectoryAlarmPoint = trajectoryAlarmPointArr[i],				alarmDate = trajectoryAlarmPoint.alarmTime,				alarmDateHour = dateFormat(alarmDate,'h'),				alarmDateMinute = dateFormat(alarmDate,'m');				alarmDateSecond = dateFormat(alarmDate,'s');				var alarmType = trajectoryAlarmPoint.alarmTypeCode;				switch(alarmType){					case '1004002':						alarmType = 'cx';						break;					case '1004003':						alarmType = 'dx';						break;					case '1004001':						alarmType = 'jd';						break;					case '9002':						alarmType = 'jj';						break;					case '9001':						alarmType = 'jx';						break;					case '9003':						alarmType = 'jz';						break;					case '9004':						alarmType = 'pl';						break;					case '269':						alarmType = 'kd';						break;				}				if(isNotNull(alarmDateHour) && isNotNull(alarmDateMinute)){					var alarmDateOfSecond = (parseInt(alarmDateHour) * 60 * 60) + (parseInt(alarmDateMinute) * 60) + parseInt(alarmDateSecond);					var leftRatio = (alarmDateOfSecond / allSecondOfDay).toFixed(8) * 100;					var content = '';					if(isNotNull(trajectoryAlarmPoint.driverName)){						content += trajectoryAlarmPoint.driverName;					}					if(isNotNull(trajectoryAlarmPoint.driverCode)){						content += trajectoryAlarmPoint.driverCode;					}					timeBarHtml.push(alarmHtml.format({						content : content + '在' + alarmDate + '发生'+ handlerUndefined(trajectoryAlarmPoint.alarmTypeName)+'告警',						title : handlerUndefined(trajectoryAlarmPoint.alarmTypeName),						left : leftRatio,						alarmType : alarmType,						lng : trajectoryAlarmPoint.lng,						lat : trajectoryAlarmPoint.lat					}));				}		}		if(timeBarHtml.length == 0){			var beginDate = _today + '00:00:00';			var endDate = _today + '23:59:59';			timeBarHtml.push(baseHtml.format({				width : 100,				accState : 'off',				index : 0,				beginDate: beginDate,				endDate: endDate,				cls : 'progress-info',				title : '00:00:00~23:59:59' 			}));		}		$("#timeBar").html(timeBarHtml.join(''));		$('#mapParent').css('height',clientHeight + "px");		$('#playDiv').show();		$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');		$("#timeBarParentDiv").removeClass('display');		$("#clickTrajectorySectionDiv").addClass('display');		$(".trackStartBtn").removeClass('display');		$(".trackPauseBtn").addClass('display');		$(".trackStopBtn").removeClass('display');		$(".returnAllTrajectory").addClass('display');		$("#timeBar .alarm").each(function(){			var a = $(this);			a.popover({				placement : 'top',				html : a.attr('data-title'),				trigger : 'hover',				content : a.attr('data-content')			});		});		$("#timeBar > .progress-info").unbind('mousemove');		//点击具体某一段轨迹		$("#timeBar > .progress").click(function(){			if($(this).attr('accState') == 'on'){				var end_str = $(this).attr("endDate").replace(/-/g,"/");//一般得到的时间的格式都是：yyyy-MM-dd hh24:mi:ss，所以我就用了这个做例子，是/的格式，就不用replace了。  				var end_date = new Date(end_str);//将字符串转化为时间  				//开始时间  				var sta_str = $(this).attr("beginDate").replace(/-/g,"/");  				var sta_date = new Date(sta_str);				var time = end_date - sta_date;				if(time > 5*60*1000){					drivingTrajectory.clearOverlays();					//刷新轨迹					drivingTrajectory.drawingDrivingTrajectoryParagraph($(this).attr('arrIndex'));					//刷新统计数据					drivingTrajectory._refreshTrackInfoDivInfo(drivingTrajectory.getTripDataArr()[$(this).attr('arrIndex')]);						//刷新轨迹导出参数					$("#startTime").val($(this).attr("beginDate"));					$("#stopTime").val($(this).attr("endDate"));										//左边卡片选中					$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");					$("#behaviorListDiv .section_"+$(this).attr('arrIndex')).addClass("mapMonitorBoxBorder-select");										$(".returnAllTrajectory").removeClass('display');//removeParagraphInfo					$(".trackStartBtn").removeClass('display');					$(".trackStopBtn").removeClass('display');					$(".trackPauseBtn").addClass('display');					$("#timeBarParentDiv").addClass('display');					$("#clickTrajectorySectionDiv").removeClass('display');					$('#mapParent').css('height',clientHeight + "px");					$('#playDiv').show();					$('#playDiv').animate( {'top' : (clientHeight - 266)}, 'slow');					$('#trajectorySectionTimes').html($(this).attr("title"));				}				};		});	},	//显示点熄火分段列表	drawingBehaviorList : function (insertDivId,behaviorList){		function getCutName(name,cutLength){			return isNotNull(name) ? (name.length > cutLength ? name.substring(0,cutLength)+'...' : name) : '暂无';		}		var insertHtml = new Array();		//全天记录		var statisticsData =  drivingTrajectory.getStatisticsData();		var allDayHtml = '<div class="mapMonitorBoxBorder-unselect">'					     +'<div class="mapMonitorBox-edit"  style="border: 1px solid #cdcdcd;">'					     +'	<div class="mapMonitorBoxTitle"  style="background-color: #8CB585 !important;">'					     +'	  <div class="mapMonitorBoxTitleText">'+window._today+'</div>'					     +'	</div>'					     +'	<div class="mapMonitorBoxContent">'					     +'	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">里程</span></br><span class="totalDistance">'+(statisticsData.distance).toFixed(2)+'(km)</span></div></div>'					     +'	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">能耗</span></br><span class="totalFuel">'+(statisticsData.fuelConsumTotal).toFixed(2)+'(L)</span></div></div>'					     +'	</div>'					     +'	<div class="mapMonitorBoxContent">'					     +'	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">百公里能耗</span></br><span class="hundredKMFuel">'+statisticsData.fuelConsumAverage+'(L)</span></div></div>'					     +'	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">点火时长</span></br><span class="runTotalTime">'+secondFormat(statisticsData.driveTime, 'hh:mm')+'(时)</span></div></div>'					     +'	</div>'					     +'	<div class="mapMonitorBoxContent">'					     +'	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">告警次数</span></br><span>'+statisticsData.alarmCount+'(次)</span></div></div>'					     +'	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">平均速度</span></br><span class="avgSpeed">'+statisticsData.speedAverage+'(km/h)</span></div></div>'					     +'	</div>'					     +'</div>'					     +'</div>';		insertHtml.push(allDayHtml);		//正常点熄火记录		var baseHtml = new Array();		baseHtml.push('<div class="mapMonitorBoxBorder-unselect section_{index}" {clickEvent}>');		baseHtml.push('<div class="mapMonitorBox-edit">');		baseHtml.push('	<div class="{mapMonitorBoxTitle}">');		baseHtml.push('	  <p class="mapMonitorBoxTitleText">{time_span}{fatigueFlag}</p>');		baseHtml.push('	  <p class="mapMonitorBoxTitleText floatfright"><a title="{travel_name}">{travel_name}</a></p>');		baseHtml.push('	</div>');		baseHtml.push('	<div class="mapMonitorBoxContent">');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">里程</span></br><span class="totalDistance">{distance}(km)</span></div></div>');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">能耗</span></br><span class="totalFuel">{fuel_consum_total}(L)</span></div></div>');		baseHtml.push('	</div>');		baseHtml.push('	<div class="mapMonitorBoxContent">');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">百公里能耗</span></br><span class="hundredKMFuel">{fuel_consum_average}(L)</span></div></div>');			baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">点火时长</span></br><span class="runTotalTime">{drive_time}(时)</span></div></div>');		baseHtml.push('	</div>');		baseHtml.push('	<div class="mapMonitorBoxContent">');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">告警次数</span></br><span>{alarm_count}(次)</span></div></div>');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">平均速度</span></br><span class="avgSpeed">{speed_average}(km/h)</span></div></div>');		baseHtml.push('	</div>');		baseHtml.push('</div>');		baseHtml.push('</div>');		baseHtml = baseHtml.join('');		var clickEventHtml = 'onclick="drivingTrajectory.handlerVehicleBehaviorTrip(\'{travel_id}\',\'{index}\',\'{start_time}\',\'{end_time}\');" style="cursor: pointer;" ';		//异常点熄火记录		var badHtml = new Array();		badHtml.push('<div class="mapMonitorBox-edit" style="width: 95%;height: 50px !important;margin: 10px auto;" >');		badHtml.push('	<div class="{mapMonitorBoxTitle}">');		badHtml.push('	  <div class="mapMonitorBoxTitleText">{time_span}</div>');		badHtml.push('	  <div class="mapMonitorBoxTitleText" style=" float:right; width:40% !important; text-align: right; padding-right:10px !important;">点火时长:{drive_time}</div>');		badHtml.push('	</div>');			badHtml.push('</div>');		badHtml = badHtml.join('');						for(var i=0; i < behaviorList.length; i++){			var behavior = behaviorList[i];			var travel_name = behavior.travelName,				distance = behavior.distance.toFixed(2),				fuel_consum_total = behavior.fuelConsumTotal.toFixed(2),				speed_average = behavior.speedAverage.toFixed(2),				drive_time = behavior.driveTime,				fuel_consum_average = behavior.fuelConsumAverage.toFixed(2),				alarm_count = behavior.alarmCount,				start_time = behavior.startTimeStr,				end_time = behavior.endTimeStr,				index = i,				travel_id = behavior.travelId,				isFatigue = behavior.isFatigue,				attendanceTimes	= behavior.attendanceTimes,				time_span = new Array();				clickEvent = null,				mapMonitorBoxTitle = 'mapMonitorBoxTitle';								clickEvent = clickEventHtml.format({					start_time : dateFormat(start_time,'yyyy-MM-dd hh:mm:ss'),					end_time : dateFormat(end_time,'yyyy-MM-dd hh:mm:ss'),					index : index,					travel_id : travel_id				});				time_span.push(dateFormat(start_time,'hh:mm:ss'));				time_span.push("~" +dateFormat(end_time,'hh:mm:ss'));				time_span = time_span.join('');			var fatigueFlag = '';			if(isFatigue==2){				fatigueFlag = '是';			}else if(attendanceTimes>6){				fatigueFlag +=attendanceTimes;			}			//行程时间<=5分钟或者里程<=2Km不做具体显示			if(drive_time<=5*60||distance<=2){				var badJSON = {						time_span : time_span,						travel_name : travel_name,						drive_time : secondFormat(drive_time, 'hh:mm:ss'),						mapMonitorBoxTitle : mapMonitorBoxTitle				};				insertHtml.push(badHtml.format(badJSON));			}else{				var formatJSON = {						time_span : time_span,						travel_id : travel_id,						travel_name : travel_name,						start_time : start_time,						end_time : end_time,						distance : distance,						fuel_consum_total : fuel_consum_total,						speed_average : speed_average,						drive_time : secondFormat(drive_time, 'hh:mm'),						fuel_consum_average : fuel_consum_average,						alarm_count : alarm_count,						index : index,						fatigueFlag : fatigueFlag,						clickEvent : clickEvent,						mapMonitorBoxTitle : mapMonitorBoxTitle					};				insertHtml.push(baseHtml.format(formatJSON));			}				}		$("#" + insertDivId).html(insertHtml.join(''));		$("#" + insertDivId + " .mapMonitorBoxBorder-unselect").click(function() {			if(this.onclick){				$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");				$(this).addClass("mapMonitorBoxBorder-select");			}		})	},	//显示具体某一段轨迹	drawingDrivingTrajectoryParagraph : function(travelId){				var drivingTrajectoryParagraph = this._tripParagraphMap[travelId];		this._drawingMapTrajectoryLine(drivingTrajectoryParagraph);		this._drawingMapTrajectoryMarker(drivingTrajectoryParagraph);		//显示速度曲线图		this.drawingSpeedCharts(drivingTrajectoryParagraph);		//重新实例轨迹对象		drivingTrajectory.trajectoryRunning = new TrajectoryRunning(drivingTrajectoryParagraph,this._mapObj);				//实例化滑动条		drivingTrajectory.drawingTrajectorySlider();	},	//显示全部轨迹	drawingAllDrivingTrajectory : function(){		this._drawingMapTrajectoryLine(this._drivingTrajectoryDataArr);		this._drawingMapTrajectoryMarker(this._drivingTrajectoryDataArr);		return new TrajectoryRunning(this._drivingTrajectoryDataArr,this._mapObj);	},	//百度地图画路线	_drawingMapTrajectoryLine : function(pointInfoArr){		function TempLinePointArray(){			this._pointArray = new Array();		}		TempLinePointArray.prototype = {			push : function(lng,lat){				var point = new BMap.Point(lng,lat);				this._pointArray.push(point);			},			size : function(){				return this._pointArray.length;			},			getArray : function(){				return this._pointArray;			}		};		var map = this._mapObj,			tempLinePointArr = new TempLinePointArray();				for(var i=0;i < pointInfoArr.length;i++){			var pointInfo = pointInfoArr[i];			var max_lon = 0;			var min_lon = 0;			var max_lat = 0;			var min_lat = 0;			for(var i=0;i < pointInfoArr.length;i++){				var pointInfo = pointInfoArr[i];				if(i == (pointInfoArr.length - 1)){					if(pointInfo.lng != undefined && pointInfo.lat != undefined){						tempLinePointArr.push(pointInfo.lng,pointInfo.lat);						var polylineObj = new BMap.Polyline(tempLinePointArr.getArray(), {strokeColor:'#0000ff', strokeWeight:4, strokeOpacity:0.8});						map.addOverlay(polylineObj);					}				}else{					if(pointInfo.lng != undefined && pointInfo.lat != undefined){						tempLinePointArr.push(pointInfo.lng,pointInfo.lat);					}				}								if(i == 0){					max_lon = pointInfo.lng;					min_lon = pointInfo.lng;					max_lat = pointInfo.lat;					min_lat = pointInfo.lat;				}else{					if(pointInfo.lng>max_lon){						max_lon = pointInfo.lng;//最大经度					}else{						min_lon = pointInfo.lng;//最小经度					}					if(pointInfo.lat>max_lon){						max_lat = pointInfo.lat;//最大纬度					}else{						min_lat = pointInfo.lat;//最小纬度					}				}			}			if(max_lon>0&&max_lat>0&&min_lon>0&&min_lat>0){				var pointArray = new Array();				//左上角				pointArray.push(new BMap.Point(min_lon, max_lat));				//右上角				pointArray.push(new BMap.Point(max_lon, max_lat));				//左下角				pointArray.push(new BMap.Point(min_lon, min_lat));				//右下角				pointArray.push(new BMap.Point(max_lon, min_lat));								var b = new BMap.Bounds(new BMap.Point(min_lon, min_lat),new BMap.Point(max_lon, max_lat));				//设置地图区域				try {						map.setZoom(12);					map.setCenter(new BMap.Point((max_lon+min_lon)/2, (max_lat+min_lat)/2));					BMapLib.AreaRestriction.setBounds(map, b);				} catch (e) {					alert("控制地图显示区域出错！");				}			}			}	},	//取得轨迹统计信息	_refreshTrackInfoDivInfo : function(statisticsData){		function handlerHtml(label,value){			var baseHtml = '<label class="span6" style="text-align: right;">{label}：</label><label class="span6" style="text-align: left;">{value}</label>';			return baseHtml.format({				label : label,				value : value			});		}		var info = statisticsData;		info = info == undefined ? {} : info;		//修改车机号		$("#deviceCode").val(info.deviceCode);				var runTotalTime = info.driveTime;		var totalDistance = (info.distance).toFixed(2);		if(runTotalTime != undefined && totalDistance != undefined){			info['avgSpeed'] = Math.round(totalDistance / (runTotalTime / 3600).toFixed(2));		}		var threeFast = 0,			accelerateTimes = info.accelerateTimes,			decelerateTimes = info.decelerateTimes,			sharpTurnTimes = info.sharpTurnTimes;		if(accelerateTimes != undefined && accelerateTimes > 0)threeFast += accelerateTimes;		if(decelerateTimes != undefined && decelerateTimes > 0)threeFast += decelerateTimes;		if(sharpTurnTimes != undefined && sharpTurnTimes > 0)threeFast += sharpTurnTimes;		info['threeFast'] = threeFast == 0 ? '暂无' :  threeFast;		 $(".divchild-c").find('[data-name]').each(function(){			 var that = $(this);			 var key = that.attr('data-name');			 var value = info[key];			 value = isNotNull(value) ? value : '暂无';			 if((key == 'idingDuration' || key == 'driveTime') && value > 0){				 value = secondFormat(value, 'hh:mm:ss');			 }			 if(!isNaN(value)){				 value = value.toFixed(2);			 }			 var prefix = that.attr('data-prefix');			 value += isNotNull(prefix) ? prefix : '';			 var suffix = that.attr('data-suffix');			 value += (value != '暂无' && isNotNull(suffix))? suffix : '';			 that.html(value);		 });		 		},	//标出轨迹点(画轨迹只标出起止点,即type为null,type不为空时显示所有轨迹点)	_drawingMapTrajectoryMarker : function(pointInfoArr,type){		OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var carMapInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp">速度：<font>'+(isNotNull(carMapInfo.speed) ? carMapInfo.speed : 0)+'(km/h)</font></p>');			        message.push('<p class="Map_popUp">大概地点：<font>'+address+'</font></p>');			        message.push('<p class="Map_popUp">定位时间：<font>'+handlerUndefined(carMapInfo.obdDate)+'</font></p>');			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:330});			        that.openInfoWindow(infoWindow);			      			       });			});		}		var map = this._mapObj,			gc = this._gc,			fristPointDate,			lastPointDate;				if(!type){//初次画轨迹			if(pointInfoArr.length > 0){				//添加起始点				var start_pointInfo = pointInfoArr[0],				start_point = new BMap.Point(start_pointInfo.lng,start_pointInfo.lat);								start_markerIcon = new BMap.Icon(ctx + "/img/map/start_icon.png", new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});				fristPointDate = start_pointInfo.obdDate;				start_marker = new BMap.Marker(start_point,{icon:start_markerIcon});				map.setZoom(13);				map.setCenter(start_point);				map.addOverlay(start_marker); 				var start_eventObj = new OpenInfoWindowsEvent(start_pointInfo,start_marker);				start_eventObj.blindOpenInfoWindowsEvent();				var end_pointInfo = pointInfoArr[pointInfoArr.length - 1],					end_point = new BMap.Point(end_pointInfo.lng,end_pointInfo.lat);									end_markerIcon = new BMap.Icon(ctx + "/img/map/end_icon.png", new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});					lastPointDate = end_pointInfo.obdDate;					end_marker = new BMap.Marker(end_point,{icon:end_markerIcon});				map.addOverlay(end_marker); 				var end_eventObj = new OpenInfoWindowsEvent(end_pointInfo,end_marker);				end_eventObj.blindOpenInfoWindowsEvent();				//告警点				this.drivingTrajectoryAlarmPoint(fristPointDate,lastPointDate);			}		}else{//显示所有轨迹点			drivingTrajectory._pointMarkers.length = 0;			for(var i=1; i < pointInfoArr.length-1; i++){				var pointInfo = pointInfoArr[i],					markerIcon = null,					point = new BMap.Point(pointInfo.lng,pointInfo.lat);					markerIcon = new BMap.Icon(ctx + "/img/map/route_direction_" + getCarDegree(pointInfo.direction) + ".png", 									new BMap.Size(12,12),{anchor: new BMap.Size(6, 6)});				if(markerIcon != null){					var marker = new BMap.Marker(point,{icon:markerIcon});					map.addOverlay(marker); 					var eventObj = new OpenInfoWindowsEvent(pointInfo,marker);					eventObj.blindOpenInfoWindowsEvent();										//将点覆盖物放到数组里					drivingTrajectory._pointMarkers.push(marker);				}			}		}			},	//告警点	drivingTrajectoryAlarmPoint : function(beginDate,endDate){		var map = this._mapObj,gc = this._gc;		var dataArr = this._trajectoryAlarmPointArr;		beginDate = (beginDate instanceof Date) ? beginDate.getTime():  beginDate.formatDate().getTime();		endDate = (endDate instanceof Date) ? endDate.getTime() : endDate.formatDate().getTime();		OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var alarmInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp"><span>工号：<font>'+handlerUndefined(alarmInfo.driverCode)+'</font></span>驾驶员：<font>'+handlerUndefined(alarmInfo.driverName)+'</font></p>');			        message.push('<p class="Map_popUp">告警类型：<font>'+handlerUndefined(alarmInfo.alarmTypeName)+'</font></p>');			        message.push('<p class="Map_popUp">大概地点：<font>'+address+'</font></p>');			        message.push('<p class="Map_popUp">告警时间：<font>'+handlerUndefined(alarmInfo.alarmTime)+'</font></p>');			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:300});			        that.openInfoWindow(infoWindow);			      			       		       });			});		}		for(var i=0;i < dataArr.length; i++){			var alarmInfo = dataArr[i];			var alarmTime = alarmInfo.alarmTime.formatDate().getTime();			var iconSrc = ctx;			if(alarmTime >= beginDate && alarmTime <= endDate){				switch(alarmInfo.alarmTypeCode){					case '1004002':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_cx.png';						break;					case '1004003':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_dx.png';						break;					case '1004001':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jd.png';						break;					case '9002':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jj.png';						break;					case '9001':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jx.png';						break;					case '9003':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jz.png';						break;					case '9004':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_pl.png';						break;					case '269':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_kd.png';						break;				}				var markerIcon = new BMap.Icon(iconSrc, new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)}),				point = new BMap.Point(alarmInfo.lng,alarmInfo.lat);				var marker = new BMap.Marker(point,{icon:markerIcon});				map.addOverlay(marker); 				var eventObj = new OpenInfoWindowsEvent(alarmInfo,marker);				eventObj.blindOpenInfoWindowsEvent();			}		}	},	//轨迹回放的频率，0.3秒一个点	_timerHandler : function(){		var isLast = drivingTrajectory.trajectoryRunning.gotoNextPoint();		if(isLast){			clearTimeout(drivingTrajectory.timer);			drivingTrajectory.trajectoryRunning.resetIndex(0);			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');			//进度条			$(".ui-slider-range").css("width","100%");			$(".ui-slider-handle").css("left","0%");		}else{			drivingTrajectory.timer = setTimeout(drivingTrajectory._timerHandler,300);		}	},	//绑定按钮点击事件	_initTimeBarBtn : function(){		//开始按钮		$(".trackStartBtn").click(function(){			$(".trackPauseBtn").removeClass('display');			$(".trackStartBtn").addClass('display');			drivingTrajectory._timerHandler();		});		//暂停按钮		$(".trackPauseBtn").click(function(){			clearTimeout(drivingTrajectory.timer);			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');		});		//返回按钮		$(".returnAllTrajectory").click(function(){			clearTimeout(drivingTrajectory.timer);			drivingTrajectory.trajectoryRunning.reset();			//去除速度曲线			drivingTrajectory.speedChart!=null;			$("#speedCharts").html('');				$("#speedValue").addClass('display');			$("#deviceCode").val('');			//刷新轨迹导出参数			$("#startTime").val($("#today").val()+' 00:00:00');			$("#stopTime").val($("#today").val()+' 23:59:59');			drivingTrajectory.clearOverlays();			//重新画轨迹			drivingTrajectory.trajectoryRunning = drivingTrajectory.drawingAllDrivingTrajectory();			//重新请求统计数据			drivingTrajectory._refreshTrackInfoDivInfo(drivingTrajectory.getStatisticsData());			$('#mapParent').css('height',clientHeight + "px");			$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');			$(".returnAllTrajectory").addClass('display');			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');			$(".trackStopBtn").removeClass('display');			$("#clickTrajectorySectionDiv").addClass('display');			$("#timeBarParentDiv").removeClass('display');			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');			$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");		});		//停止按钮		$(".trackStopBtn").click(function(){			clearTimeout(drivingTrajectory.timer);			drivingTrajectory.trajectoryRunning.reset();			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');		});		//导出轨迹点		$("#exportPoint").click(function(){				var queryDate = $("#today").val();			var deviceCode = $("#deviceCode").val();			var startTime = $("#startTime").val();			var stopTime = $("#stopTime").val();			var url = $(this).attr("rel_url");			url = url+'&startTime='+startTime+'&stopTime='+stopTime+'&queryDate='+queryDate+'&deviceCode='+deviceCode;			window.location.href= url;		});		//显示所有轨迹点		$("#showAllPoint").click(function(){				drivingTrajectory._drawingMapTrajectoryMarker(drivingTrajectory.trajectoryRunning._pointInfoArr,'all');			$(this).hide();			$("#clearAllPoint").removeClass("display");			$("#clearAllPoint").show();		});		//清除轨迹点		$("#clearAllPoint").click(function(){			drivingTrajectory.clearPointMarker();			$(this).hide();			$("#showAllPoint").show();		});	},	//点击分段信息显示分段轨迹	handlerVehicleBehaviorTrip : function(travelId,index,startDate,endDate){		$(".trackStopBtn").click();		function getCutName(name,cutLength){			return isNotNull(name) ? (name.length > cutLength ? name.substring(0,cutLength)+'...' : name) : '暂无';		}		drivingTrajectory.clearOverlays();		clearTimeout(drivingTrajectory.timer);		//刷新轨迹		drivingTrajectory.drawingDrivingTrajectoryParagraph(travelId);		//重新请求统计数据		drivingTrajectory._refreshTrackInfoDivInfo(drivingTrajectory.getTripDataArr()[index]);			//刷新轨迹导出参数		$("#startTime").val(startDate);		$("#stopTime").val(endDate);				closePicture();		$(".returnAllTrajectory").removeClass('display');//removeParagraphInfo		$(".trackStartBtn").removeClass('display');		$(".trackStopBtn").removeClass('display');		$(".trackPauseBtn").addClass('display');		$("#timeBarParentDiv").addClass('display');		$("#clickTrajectorySectionDiv").removeClass('display');		$('#mapParent').css('height',clientHeight + "px");		$('#playDiv').show();		$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');		$('#trajectorySectionTimes').html(dateFormat(startDate,'hh:mm:ss')+"~" +dateFormat(endDate,'hh:mm:ss'));	},	//根据时间画轨迹	drawingDrivingTrajectoryByTime : function(startDate,endDate){		var	allPointList = this._drivingTrajectoryDataArr;		var drivingTrajectoryPointList = new Array();		startDate = startDate.formatDate();		endDate = endDate.formatDate();		for(var i = 0;i < allPointList.length; i++){			var pointInfo = allPointList[i];			var pointDate = pointInfo.obdDate.formatDate();			if(pointDate >= startDate && pointDate <= endDate){				drivingTrajectoryPointList.push(pointInfo);			}		}		drivingTrajectory._drawingMapTrajectoryLine(drivingTrajectoryPointList);		drivingTrajectory._drawingMapTrajectoryMarker(drivingTrajectoryPointList);		//显示速度曲线		drivingTrajectory.drawingSpeedCharts(drivingTrajectoryPointList);		//重新实例轨迹对象		drivingTrajectory.trajectoryRunning = new TrajectoryRunning(drivingTrajectoryPointList,this._mapObj);			//实例化滑动条		drivingTrajectory.drawingTrajectorySlider();	},	//生成速度曲线图	drawingSpeedCharts : function(pointInfoArr){		drivingTrajectory.speedChart = null;		$("#speedCharts").html('');		//速度数组		var speed_data = [];		//循环添加速度点		for(var i=0;i < pointInfoArr.length;i++){			//速度对象			var speedJson = {};			var speed = pointInfoArr[i].speed;			speedJson = {y:speed};			speed_data.push(speedJson);		}					//实例化曲线图		drivingTrajectory.speedChart = new Highcharts.Chart({			chart: { renderTo : 'speedCharts',backgroundColor: 'rgba(255, 255, 255, 0.3)'},	        colors:["blue"],			tooltip: {	            formatter: function () {	                return '<b>' + this.y + 'km/h</b>';	            }	        },			plotOptions: {	            series: {	                point: {	                    events: {	                        click: function () {	                            showThisPosition(this.x);	                        }	                    }	                }	            }	        },			yAxis: {	            min: 0,				tickPixelInterval: 10 ,				gridLineWidth: 0,				title: {					enabled: false				},				plotLines: [{   	                    color: 'red',	                    dashStyle: 'Solid',	                    width: 1.5,	                    value: 70,  	                    zIndex: 5,						label: {							text: '超速值',							style: {								color: 'red',								fontWeight: 'bold'							}						}	                }]	        },			xAxis: {				labels: {					enabled: false				}			},	        title: {	            text: ""	        },			legend:{				enabled: false			},			credits:{				enabled: false			},	        series: [{	            type: 'line',	            name: 'Observations',	            data: speed_data,	            marker: {	                radius: 1	            }	        }]	    });	},	//实例化进度条	drawingTrajectorySlider : function(){		$("#slider" ).slider({			range: "max",			max:drivingTrajectory.trajectoryRunning._pointInfoArr.length-1,			slide: function( event, ui ) {					if(ui.value < drivingTrajectory.trajectoryRunning._pointIndex - 1){					//回退时					drivingTrajectory.trajectoryRunning._pointIndex = ui.value;						drivingTrajectory.trajectoryRunning._linePointArr.length = ui.value;						drivingTrajectory.trajectoryRunning._speedPointArr.length = ui.value;					}					drivingTrajectory.trajectoryRunning.gotoNextPoint();			}		});		$(".ui-slider-handle").css("border","1px solid");		//显示实时车速		$("#speedValue").removeClass('display');		$("#carSpeed").html("0km/h");	},	//清除覆盖点	clearPointMarker : function(){		for(var i=0;i<drivingTrajectory._pointMarkers.length;i++){			drivingTrajectory._mapObj.removeOverlay(drivingTrajectory._pointMarkers[i]);		}	}}//返回车辆管理页面function returnList(){	parent.location.reload();}