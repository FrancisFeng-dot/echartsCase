$(function(){	//实例化地图，显示轨迹	console.log("helll");	drivingTrajectory.init();	//实例化按钮	drivingTrajectory._initTimeBarBtn();});//定义一个轨迹播放对象function TrajectoryRunning(pointInfoArr,map){	this._pointInfoArr = pointInfoArr;	this._map = map;	this._pointIndex = 0;	this._linePointArr = new Array();	if(drivingTrajectory.speedChart!=null){		//定义速度数组		this._speedPointArr = new Array();	}	}//定义TrajectoryRunning属性resetTrajectoryRunning.prototype.reset = function(){	this.resetIndex();	drivingTrajectory.clearOverlays();	var pointInfoArr = this._pointInfoArr;	drivingTrajectory._drawingMapTrajectoryLine(pointInfoArr);	drivingTrajectory._drawingMapTrajectoryMarker(pointInfoArr);	if(drivingTrajectory.speedChart!=null){		//速度曲线		drivingTrajectory.drawingSpeedCharts(pointInfoArr);	}	//进度条	$(".ui-slider-range").css("width","100%");	$(".ui-slider-handle").css("left","0%");	//实时车速	$("#carSpeed").html("0km/h");	};//定义TrajectoryRunning属性resetIndexTrajectoryRunning.prototype.resetIndex = function(){	this._pointIndex = 0;	this._linePointArr = new Array();	if(drivingTrajectory.speedChart!=null){		//定义速度数组		this._speedPointArr = new Array();	}};//定义轨迹回放方法(画点)TrajectoryRunning.prototype.gotoNextPoint = function(){	function createLinePoint(pointInfo,type){		var point = new BMap.Point(parseFloat(pointInfo.lng),parseFloat(pointInfo.lat));		var markerIcon = new BMap.Icon(ctx + ((type == 'begin') ? "/img/map/start_icon.png" : "/img/map/end_icon.png"), new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});		var marker = new BMap.Marker(point,{icon:markerIcon});		map.addOverlay(marker); 	}	var map = this._map;	var pointInfoArr = this._pointInfoArr;	var pointIndex = this._pointIndex;	var linePointArr = this._linePointArr;	var isLast = false;	map.clearOverlays();	//曲线同步    var speedPointArr = this._speedPointArr;    //轨迹变动	if(pointIndex < pointInfoArr.length ){		var pointInfo = pointInfoArr[pointIndex];		//实时车速		$("#carSpeed").html(pointInfo.speed+"km/h");		var pt = new BMap.Point(parseFloat(pointInfo.lng),parseFloat(pointInfo.lat)),			degree = getCarDegree(pointInfo.direction),			carIcon = new BMap.Icon(ctx+"/img/map/car_driving_"+degree+".png", new BMap.Size(35,35)),			marker = new BMap.Marker(pt,{icon:carIcon});        map.addOverlay(marker);        map.setCenter(pt);	    if( pointIndex == 0){	    	 map.setZoom(13);	    }        linePointArr.push(pt);                if(drivingTrajectory.speedChart!=null){    		//定义速度数组    		var speedJson = {};    		var speed = pointInfoArr[pointIndex].speed;    		speedJson = {y:speed};    		speedPointArr.push(speedJson);    	}        		this._pointIndex++;		isLast = false;	}else{		createLinePoint(pointInfoArr[linePointArr.length - 1],'end');		//this.reset();		isLast = true;	}	createLinePoint(pointInfoArr[0],'begin');    if(linePointArr.length > 1){    	var routeline = new BMap.Polyline(linePointArr, {strokeColor:"#0000ff", strokeWeight:4, strokeOpacity:0.8});		map.addOverlay(routeline);		    }    //速度曲线同步    if(drivingTrajectory.speedChart!=null&&speedPointArr.length > 1){			drivingTrajectory.speedChart.series[0].setData(speedPointArr);	}    //进度条    var handle_percent = (pointIndex/pointInfoArr.length)*100+"%";    var range_width = (1-(pointIndex/pointInfoArr.length))*100+"%";	$(".ui-slider-range").css("width",range_width);	$(".ui-slider-handle").css("left",handle_percent);    return isLast;};//弹出框function OpenInfoWindowsEvent(carMapInfo,marker){	this._carMapInfo = carMapInfo;	this._marker = marker;	this._handlerUndefined = function(value){		return isNotNull(value) ? value : '暂无';	};}//定义全局对象var drivingTrajectory = {	_mapObj : null,	_gc : null,	_drivingTrajectoryDataArr : null,	_trajectoryAlarmPointArr : null,	_tripParagraphArr : null,	trajectoryRunning : null,	_pointMarkers : [],	timer : null,	speedChart : null,	//小车是否处于运行状态	isRunning : false,	//分段时间数组	routeSections : '',	setTrajectoryAlarmPointArr : function(trajectoryAlarmPointArr){		this._trajectoryAlarmPointArr = trajectoryAlarmPointArr;	},	getTrajectoryAlarmPointArr : function(trajectoryAlarmPointArr){		return this._trajectoryAlarmPointArr;	},	getDrivingTrajectoryDataArr : function(){		return this._drivingTrajectoryDataArr;	},	getTripParagraphArr : function(){		return this._tripParagraphArr;	},	//初始化	init : function(){		window._vehicleId = $("#vehicleId").val();		window._deviceCode = $("#deviceCode").val();		window._today =$("#today").val();		window.clientHeight = document.body.clientHeight;		window.clientWidth = document.body.clientWidth;		this.setHeight();		console.log("mapParent");		this.initMap("mapParent");		console.log("mapParent");		//获取当天轨迹		/**2016-04-19将方法放入实例化地图定位当前城市的异步返回结果内部，保证能定位到当前城市**///		this.showVehicleDrivingTrajectory(_vehicleId,_deviceCode,_today);				//查询绑定事件		$("#searchBtn").click(function(){			$("#total_driveTime").val('0');			$("#total_avgSpeed").val('0');			$("#total_distance").val('0');						var queryDate = $("#queryDate").val();			$("#today").val(queryDate);			window._today = queryDate;			//获取当天轨迹			drivingTrajectory.showVehicleDrivingTrajectory(_vehicleId,_deviceCode,_today);		});				//速度曲线显示按钮		$("#speedShow").click(function(){			if($("#speedDiv").hasClass("display")){				$("#speedDiv").removeClass("display");				$("#speedShow").css("bottom","240px");				$("#speedShow").html("☈隐藏速度曲线");			}else{				$("#speedDiv").addClass("display");				$("#speedShow").css("bottom","140px");				$("#speedShow").html("☈显示速度曲线");			}		});			 	},	//设置高度	setHeight : function(){		//prevAll()		$('#mapParent').css('height',(clientHeight - 136) + "px");		$('#behaviorListDiv').css('height',(clientHeight - 60) + "px");		$('#mapParent').parent('div .row-fluid').css('height',clientHeight + "px");		$('#playDiv').css('top',(clientHeight + 1000) + "px");	//	$('#behaviorListDiv').css('height',(clientHeight - 290) + "px");	},	//实例化地图	initMap : function(divId){		this._gc = new BMap.Geocoder();		var map = this._mapObj = new BMap.Map(divId, {enableMapClick:false}); //在百度地图容器中创建一个地图	    map.centerAndZoom("北京",5);   		//获取当前IP所在城市并设置中心点为该城市    	var myCity = new BMap.LocalCity();		myCity.get(setCityCenter);    	function setCityCenter(result){			var cityName = result.name;			if(cityName && cityName != ''){				map.centerAndZoom(cityName,10);  				//获取当天轨迹				/**2016-04-19将方法放入实例化地图定位当前城市的异步返回结果内部，保证能定位到当前城市**/				drivingTrajectory.showVehicleDrivingTrajectory(_vehicleId,_deviceCode,_today);			}		}	    map.enableScrollWheelZoom(true);  	    map.addControl(new BMap.NavigationControl()); 	    map.setMinZoom(5);     	map.setMaxZoom(15);		},	//地图清除方法	clearOverlays : function (){		if(this._mapObj != null){			this._mapObj.clearOverlays();			$("#clearAllPoint").hide();			$("#showAllPoint").show();		}	},	//ajax向后台取点熄火数据	showVehicleDrivingTrajectory : function(vehicleId,deviceCode,today){		$.ajax({			url : ctx + '/resourcesManage/vehicleTrajectory/getVehicleDrivingTrajectoryOfToday.do',			type : 'POST',			data : {				vehicleId : vehicleId,				deviceCode : deviceCode,				today : today			},			dataType : 'JSON', 			cache : false,			beforeSend : function(){				showPicture();			},			success : function(data){				if(data.states == 200){					drivingTrajectory.clearOverlays();					window.vehicleId = vehicleId;					window.deviceCode = deviceCode;					//封装点熄火数据					drivingTrajectory.handlerDrivingTrajectoryDataArr(data.drivingTrajectoryPointList);					//设置告警点					drivingTrajectory.setTrajectoryAlarmPointArr(data.drivingTrajectoryAlarmPointList);					//渲染时间轴					drivingTrajectory._showTripTimeBar();					//画出轨迹线					drivingTrajectory.trajectoryRunning = drivingTrajectory.drawingAllDrivingTrajectory();					//显示统计					drivingTrajectory._refreshTrackInfoDivInfo(vehicleId,deviceCode,today+' 00:00:00',today+' 23:59:59',null);										//显示当天轨迹分段					//drivingTrajectory.drawingBehaviorList('behaviorListDiv',data.drivingDataList);					drivingTrajectory.drawingRouteSectionList('behaviorListDiv',drivingTrajectory.routeSections,vehicleId,deviceCode);				}else{					alertMessage("查询车辆轨迹信息出错，请联系管理员！",0);				}				closePicture();			}		});	},	//封装点熄火数据	handlerDrivingTrajectoryDataArr : function(dataArr){		//默认车辆处于熄火状态		drivingTrajectory.isRunning = false;		//分段数组置零		drivingTrajectory.routeSections='';				var filteredPointInfoArr = new Array(),		    tripParagraphPoints = new Array(),			tripParagraphArr = new Array(),			lastPointInfo = null;		for(var i=0; i < dataArr.length; i++){			var pointInfo = dataArr[i];			//过滤熄火的点			if(pointInfo.accStatus == 1){				filteredPointInfoArr.push(pointInfo);			}			//分割点熄火时间段的点			if(lastPointInfo == null){				var firstPointInfoDate = dateFormat(pointInfo.obdDate,'yyyy-MM-dd') + ' 00:00:00';				//判断第一个点不是当天的 00:00:00				if(pointInfo.obdDate != firstPointInfoDate){					//以第一个点为基准，复制一个新的点对象					var firstPointInfo = $.extend({},pointInfo);					//新的点的时间改为当天的 00:00:00。					firstPointInfo.obdDate = firstPointInfoDate;					//把新复制的第一个点的点火状态改为熄火					firstPointInfo.accStatus = 0;					//alert(jsonToString(firstPointInfo));					//以当天时间的 00:00:00的点作为第一段时间分段的第一个点					tripParagraphPoints.push(firstPointInfo);					//判断第一个点是否是点火状态					if(pointInfo.accStatus == 1){//如果是，则以新复制的点和第一个点为结尾组成第一段时间段						tripParagraphPoints.push(pointInfo);						tripParagraphArr.push(tripParagraphPoints);						tripParagraphPoints = new Array();					}				}				tripParagraphPoints.push(pointInfo);			}else{				if(i == (dataArr.length - 1)){					var lastPointInfoDate = dateFormat(pointInfo.obdDate,'yyyy-MM-dd') + ' 23:59:59';					//判断最后一个点不是当天的 23:59:59					if(pointInfo.obdDate != lastPointInfoDate){						var lastPointInfo = $.extend({},pointInfo);						//新的点的时间改为当天的 23:59:59						lastPointInfo.obdDate = lastPointInfoDate;						//把新复制的点火状态改为熄火						lastPointInfo.accStatus = 0;						if(pointInfo.accStatus == 1){							//最后一个点为点火则证明小车现在是在运行中							drivingTrajectory.isRunning = true;														tripParagraphPoints.push(pointInfo);							tripParagraphArr.push(tripParagraphPoints);							tripParagraphPoints = new Array();							var secondLastPointInfo = $.extend({},pointInfo);							secondLastPointInfo.accStatus = 0;							tripParagraphPoints.push(secondLastPointInfo);						}						tripParagraphPoints.push(lastPointInfo);						tripParagraphArr.push(tripParagraphPoints);					}else{						if(pointInfo.accStatus == 1){							//最后一个点为点火则证明小车现在是在运行中							drivingTrajectory.isRunning = true;						}						tripParagraphPoints.push(pointInfo);						tripParagraphArr.push(tripParagraphPoints);					}					lastPointInfo = null;				}else{					if(pointInfo.accStatus == lastPointInfo.accStatus){						tripParagraphPoints.push(pointInfo);					}else{						tripParagraphPoints.push(pointInfo);						tripParagraphArr.push(tripParagraphPoints);						tripParagraphPoints = new Array();						tripParagraphPoints.push(pointInfo);					}				}			}			lastPointInfo = pointInfo;		}		this._drivingTrajectoryDataArr = filteredPointInfoArr;		this._tripParagraphArr = tripParagraphArr;	},	//渲染时间轴	_showTripTimeBar : function(){		function handlerUndefined(value){			return (value == undefined || (!isNotNull(value)) ? '暂无' : value);		}		var allSecondOfDay = 24 * 60 * 60,			timeBarHtml = new Array(),			tripParagraphArr = drivingTrajectory.getTripParagraphArr(),			trajectoryAlarmPointArr = drivingTrajectory.getTrajectoryAlarmPointArr();		//生成时间轴DIV		var baseHtml = '<div class="progress {cls}" style="width: {width}%; float: left" title="{title}" beginDate="{beginDate}" endDate="{endDate}" accState="{accState}" arrIndex="{index}"><div class="bar" style="width: 100%;"></div></div>',			alarmHtml = '<a data-content="{content}" class="alarm alarm-{alarmType}" data-title="{title}" style="left: {left}%;" data-lng="{lng}" data-lat={lat}></a>',			widthRatioCount = 0;		for(var i=0 ; i < tripParagraphArr.length; i++){			var tripParagraphPoints = tripParagraphArr[i];			var fristPoint = tripParagraphPoints[0];			var lastPoint = tripParagraphPoints[tripParagraphPoints.length-1];			var widthRatio = 0;			//将分段时间放入数组			if(fristPoint.accStatus == 1){				var time = i+'_'+fristPoint.obdDate+'_'+lastPoint.obdDate;				drivingTrajectory.routeSections += time+',';			}			if(i == (tripParagraphArr.length - 1)){				widthRatio = 100 - widthRatioCount;			}else{				var secondDifference = daysBetween(fristPoint.obdDate,lastPoint.obdDate,'ss');				widthRatio = (secondDifference / allSecondOfDay).toFixed(8) * 100;				widthRatioCount += widthRatio;			}			timeBarHtml.push(baseHtml.format({				width : widthRatio,				accState : (fristPoint.accStatus == 0) ? 'off' : 'on',				index : i,				beginDate: fristPoint.obdDate,				endDate: lastPoint.obdDate,				cls : (fristPoint.accStatus == 0) ? 'progress-info' : 'progress-warning',				title : dateFormat(fristPoint.obdDate,'hh:mm:ss') + '~' + dateFormat(lastPoint.obdDate,'hh:mm:ss')			}));		}		for(var i=0 ; i < trajectoryAlarmPointArr.length; i++){			var trajectoryAlarmPoint = trajectoryAlarmPointArr[i],				alarmDate = trajectoryAlarmPoint.alarmTime,				alarmDateHour = dateFormat(alarmDate,'h'),				alarmDateMinute = dateFormat(alarmDate,'m');				alarmDateSecond = dateFormat(alarmDate,'s');				var alarmType = trajectoryAlarmPoint.alarmTypeCode;				switch(alarmType){					case '1004002':						alarmType = 'cx';						break;					case '1004003':						alarmType = 'dx';						break;					case '1004001':						alarmType = 'jd';						break;					case '9002':						alarmType = 'jj';						break;					case '9001':						alarmType = 'jx';						break;					case '9003':						alarmType = 'jz';						break;					case '9004':						alarmType = 'pl';						break;					case '269':						alarmType = 'kd';						break;				}				if(isNotNull(alarmDateHour) && isNotNull(alarmDateMinute)){					var alarmDateOfSecond = (parseInt(alarmDateHour) * 60 * 60) + (parseInt(alarmDateMinute) * 60) + parseInt(alarmDateSecond);					var leftRatio = (alarmDateOfSecond / allSecondOfDay).toFixed(8) * 100;					var content = '';					if(isNotNull(trajectoryAlarmPoint.driverName)){						content += trajectoryAlarmPoint.driverName;					}					if(isNotNull(trajectoryAlarmPoint.driverCode)){						content += trajectoryAlarmPoint.driverCode;					}					timeBarHtml.push(alarmHtml.format({						content : content + '在' + alarmDate + '发生'+ handlerUndefined(trajectoryAlarmPoint.alarmTypeName)+'告警',						title : handlerUndefined(trajectoryAlarmPoint.alarmTypeName),						left : leftRatio,						alarmType : alarmType,						lng : trajectoryAlarmPoint.lng,						lat : trajectoryAlarmPoint.lat					}));				}		}		if(timeBarHtml.length == 0){			var beginDate = _today + '00:00:00';			var endDate = _today + '23:59:59';			timeBarHtml.push(baseHtml.format({				width : 100,				accState : 'off',				index : 0,				beginDate: beginDate,				endDate: endDate,				cls : 'progress-info',				title : '00:00:00~23:59:59' 			}));		}		$("#timeBar").html(timeBarHtml.join(''));		$('#mapParent').css('height',(clientHeight - 136) + "px");		$('#playDiv').show();		$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');		$("#timeBarParentDiv").removeClass('display');		$("#clickTrajectorySectionDiv").addClass('display');		$(".trackStartBtn").removeClass('display');		$(".trackPauseBtn").addClass('display');		$(".trackStopBtn").removeClass('display');		$(".returnAllTrajectory").addClass('display');		$("#timeBar .alarm").each(function(){			var a = $(this);			a.popover({				placement : 'top',				html : a.attr('data-title'),				trigger : 'hover',				content : a.attr('data-content')			});		});		$("#timeBar > .progress-info").unbind('mousemove');		//点击具体某一段轨迹		$("#timeBar > .progress").click(function(){			if($(this).attr('accState') == 'on'){				var end_str = $(this).attr("endDate").replace(/-/g,"/");//一般得到的时间的格式都是：yyyy-MM-dd hh24:mi:ss，所以我就用了这个做例子，是/的格式，就不用replace了。  				var end_date = new Date(end_str);//将字符串转化为时间  				//开始时间  				var sta_str = $(this).attr("beginDate").replace(/-/g,"/");  				var sta_date = new Date(sta_str);				var time = end_date - sta_date;				if(time > 5*60*1000){					//重新请求统计数据					drivingTrajectory._refreshTrackInfoDivInfo(_vehicleId,_deviceCode,$(this).attr("beginDate"),$(this).attr("endDate"),'type');					drivingTrajectory.clearOverlays();					//刷新轨迹					drivingTrajectory.drawingDrivingTrajectoryParagraph($(this).attr('arrIndex'));					//刷新轨迹导出参数					$("#startTime").val($(this).attr("beginDate"));					$("#stopTime").val($(this).attr("endDate"));										//左边卡片选中					$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");					$("#behaviorListDiv .section_"+$(this).attr('arrIndex')).addClass("mapMonitorBoxBorder-select");										$(".returnAllTrajectory").removeClass('display');//removeParagraphInfo					$(".trackStartBtn").removeClass('display');					$(".trackStopBtn").removeClass('display');					$(".trackPauseBtn").addClass('display');					$("#timeBarParentDiv").addClass('display');					$("#clickTrajectorySectionDiv").removeClass('display');					$('#mapParent').css('height',(clientHeight - 136) + "px");					$('#playDiv').show();					$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');					$('#trajectorySectionTimes').html($(this).attr("title"));				}				};		});	},	//显示点熄火分段列表	drawingBehaviorList : function (insertDivId,behaviorList){		function getCutName(name,cutLength){			return isNotNull(name) ? (name.length > cutLength ? name.substring(0,cutLength)+'...' : name) : '暂无';		}		//正常点熄火记录		var baseHtml = new Array();		baseHtml.push('<div class="mapMonitorBoxBorder-unselect" {clickEvent}>');		baseHtml.push('<div class="mapMonitorBox-edit">');		baseHtml.push('	<div class="{mapMonitorBoxTitle}">');		baseHtml.push('	  <div class="mapMonitorBoxTitleText">{time_span}</div>');		baseHtml.push('	</div>');		baseHtml.push('	<div class="mapMonitorBoxContent">');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">里程</span></br><span class="totalDistance">{distance}(km)</span></div></div>');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">能耗</span></br><span class="totalFuel">{fuel_consum_total}(L)</span></div></div>');		baseHtml.push('	</div>');		baseHtml.push('	<div class="mapMonitorBoxContent">');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">百公里能耗</span></br><span class="hundredKMFuel">{fuel_consum_average}(L)</span></div></div>');			baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">点火时长</span></br><span class="runTotalTime">{drive_time}(时)</span></div></div>');		baseHtml.push('	</div>');		baseHtml.push('	<div class="mapMonitorBoxContent">');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">告警次数</span></br><span>{alarm_count}(次)</span></div></div>');		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class="font-weight">平均速度</span></br><span class="avgSpeed">{speed_average}(km/h)</span></div></div>');		baseHtml.push('	</div>');		baseHtml.push('</div>');		baseHtml.push('</div>');		baseHtml = baseHtml.join('');		var clickEventHtml = 'onclick="drivingTrajectory.handlerVehicleBehaviorTrip(\'{start_time}\',\'{end_time}\');" style="cursor: pointer;" ';		//异常点熄火记录		var badHtml = new Array();		badHtml.push('<div class="mapMonitorBox-edit" style="width: 95%; height: 50px !important; margin: 10px auto;" >');		badHtml.push('	<div class="{mapMonitorBoxTitle}">');		badHtml.push('	  <div class="mapMonitorBoxTitleText">{time_span}</div>');		badHtml.push('	  <div class="mapMonitorBoxTitleText" style=" float:right; width:40% !important; text-align: right; padding-right:10px !important;"><a title="{drive_time}">点火时长:{drive_time}</a></div>');		badHtml.push('	</div>');			badHtml.push('</div>');		badHtml = badHtml.join('');				var insertHtml = new Array();		for(var i=0; i < behaviorList.length; i++){			var behavior = behaviorList[i];			var distance = behavior.DISTANCE,				fuel_consum_total = behavior.FUEL_CONSUM_TOTAL,				speed_average = behavior.SPEED_AVERAGE,				drive_time = behavior.DRIVE_TIME,				fuel_consum_average = behavior.FUEL_CONSUM_AVERAGE,				alarm_count = behavior.ALARM_COUNT,				start_time = behavior.START_TIME,				end_time = behavior.END_TIME,				time_span = new Array();				clickEvent = null,				mapMonitorBoxTitle = 'mapMonitorBoxTitle';								clickEvent = clickEventHtml.format({					start_time : dateFormat(start_time,'yyyy-MM-dd hh:mm:ss'),					end_time : dateFormat(end_time,'yyyy-MM-dd hh:mm:ss')				});				time_span.push(dateFormat(start_time,'hh:mm:ss'));				time_span.push("~" +dateFormat(end_time,'hh:mm:ss'));				time_span = time_span.join('');						//行程时间<=5分钟或者里程<=2Km不做具体显示			if(drive_time<=5/60||distance<=2){				var badJSON = {						time_span : time_span,						drive_time : drive_time,						mapMonitorBoxTitle : mapMonitorBoxTitle				};				insertHtml.push(badHtml.format(badJSON));			}else{				var formatJSON = {						time_span : time_span,						start_time : start_time,						end_time : end_time,						distance : distance,						fuel_consum_total : fuel_consum_total,						speed_average : speed_average,						drive_time : drive_time,						fuel_consum_average : fuel_consum_average,						alarm_count : alarm_count,						clickEvent : clickEvent,						mapMonitorBoxTitle : mapMonitorBoxTitle					};				insertHtml.push(baseHtml.format(formatJSON));			}				}		$("#" + insertDivId).html(insertHtml.join(''));		$("#" + insertDivId + " .mapMonitorBoxBorder-unselect").click(function() {			if(this.onclick){				$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");				$(this).addClass("mapMonitorBoxBorder-select");			}		});	},	//显示具体某一段轨迹	drawingDrivingTrajectoryParagraph : function(index){		//模拟停止按钮点击事件		$(".trackStopBtn").click();				if(typeof index != 'number'){			index = parseInt(index);		}		var drivingTrajectoryParagraph = this._tripParagraphArr[index];		this._drawingMapTrajectoryLine(drivingTrajectoryParagraph);		this._drawingMapTrajectoryMarker(drivingTrajectoryParagraph);		//显示速度曲线图		this.drawingSpeedCharts(drivingTrajectoryParagraph);		//重新实例轨迹对象		drivingTrajectory.trajectoryRunning = new TrajectoryRunning(drivingTrajectoryParagraph,this._mapObj);				//实例化滑动条		drivingTrajectory.drawingTrajectorySlider();	},	//显示全部轨迹	drawingAllDrivingTrajectory : function(){		this._drawingMapTrajectoryLine(this._drivingTrajectoryDataArr);		this._drawingMapTrajectoryMarker(this._drivingTrajectoryDataArr);		return new TrajectoryRunning(this._drivingTrajectoryDataArr,this._mapObj);	},	//百度地图画路线	_drawingMapTrajectoryLine : function(pointInfoArr){		function TempLinePointArray(){			this._pointArray = new Array();		}		TempLinePointArray.prototype = {			push : function(lng,lat){				var point = new BMap.Point(lng,lat);				this._pointArray.push(point);			},			size : function(){				return this._pointArray.length;			},			getArray : function(){				return this._pointArray;			}		};		var map = this._mapObj,			tempLinePointArr = new TempLinePointArray();		var max_lon = 0;		var min_lon = 0;		var max_lat = 0;		var min_lat = 0;		for(var i=0;i < pointInfoArr.length;i++){			var pointInfo = pointInfoArr[i];			if(i == (pointInfoArr.length - 1)){				tempLinePointArr.push(pointInfo.lng,pointInfo.lat);				var polylineObj = new BMap.Polyline(tempLinePointArr.getArray(), {strokeColor:'#0000ff', strokeWeight:4, strokeOpacity:0.8});				map.addOverlay(polylineObj);			}else{				tempLinePointArr.push(pointInfo.lng,pointInfo.lat);			}						if(i == 0){				max_lon = pointInfo.lng;				min_lon = pointInfo.lng;				max_lat = pointInfo.lat;				min_lat = pointInfo.lat;			}else{				if(pointInfo.lng>max_lon){					max_lon = pointInfo.lng;//最大经度				}else{					min_lon = pointInfo.lng;//最小经度				}				if(pointInfo.lat>max_lon){					max_lat = pointInfo.lat;//最大纬度				}else{					min_lat = pointInfo.lat;//最小纬度				}			}		}		if(max_lon>0&&max_lat>0&&min_lon>0&&min_lat>0){			var pointArray = new Array();			//左上角			pointArray.push(new BMap.Point(min_lon, max_lat));			//右上角			pointArray.push(new BMap.Point(max_lon, max_lat));			//左下角			pointArray.push(new BMap.Point(min_lon, min_lat));			//右下角			pointArray.push(new BMap.Point(max_lon, min_lat));						var b = new BMap.Bounds(new BMap.Point(min_lon, min_lat),new BMap.Point(max_lon, max_lat));			//设置地图区域			try {					map.setZoom(11);				map.setCenter(new BMap.Point((max_lon+min_lon)/2, (max_lat+min_lat)/2));				BMapLib.AreaRestriction.setBounds(map, b);								//清除限制条件				BMapLib.AreaRestriction.clearBounds();			} catch (e) {				alert("控制地图显示区域出错！");			}		}		},	//取得轨迹统计信息	_refreshTrackInfoDivInfo : function(vehicleId,deviceCode,beginDate,endDate,type){		$.ajax({				url : ctx + '/resourcesManage/vehicleTrajectory/getVehicleDrivingTrajectoryInfo.do',				type : 'POST',				data : {vehicleId : vehicleId,				 deviceCode : deviceCode,				 beginDate : beginDate,				 endDate : endDate				},				dataType : 'JSON', 				cache : false,				beforeSend : function(){					showPicture();				},				success : function(data){					if(data.states == 200){						function handlerHtml(label,value){							var baseHtml = '<label class="span6" style="text-align: right;">{label}：</label><label class="span6" style="text-align: left;">{value}</label>';							return baseHtml.format({								label : label,								value : value							});						}						var info = data.nowTimeStatisticsDataVO;						info = info == undefined ? {} : info;						if(info.energyTypeId==3){							$("#totalFuel_name").html("行程耗电");							$("#hundredKMFuel_name").html("百公里耗电");							$("#totalFuel_suffix").attr("data-suffix","(kWh)");							$("#hundredKMFuel_suffix").attr("data-suffix","(kWh)");						}else{							$("#totalFuel_name").html("行程能耗");							$("#hundredKMFuel_name").html("百公里能耗");							$("#totalFuel_suffix").attr("data-suffix","(L)");							$("#hundredKMFuel_suffix").attr("data-suffix","(L)");						}												var runTotalTime = info.runTotalTime;						var totalDistance = info.totalDistance;						if(runTotalTime != undefined && totalDistance != undefined && runTotalTime!=0){							info['avgSpeed'] = Math.round(totalDistance / (runTotalTime / 3600).toFixed(2));						}else{							info['avgSpeed'] ="暂无";						}												var threeFast = 0,							accelerateTimes = info.accelerateTimes,							decelerateTimes = info.decelerateTimes,							sharpTurnTimes = info.sharpTurnTimes;						if(accelerateTimes != undefined && accelerateTimes > 0)threeFast += accelerateTimes;						if(decelerateTimes != undefined && decelerateTimes > 0)threeFast += decelerateTimes;						if(sharpTurnTimes != undefined && sharpTurnTimes > 0)threeFast += sharpTurnTimes;						info['threeFast'] = threeFast == 0 ? '暂无' :  threeFast;						 $(".divchild-c").find('[data-name]').each(function(){							 var that = $(this);							 var key = that.attr('data-name');							 var value = info[key];							 value = isNotNull(value) ? value : '暂无';							 if((key == 'idingDuration' || key == 'runTotalTime') && value > 0){								 value = secondFormat(value, 'hh:mm:ss');							 }							 var prefix = that.attr('data-prefix');							 value += isNotNull(prefix) ? prefix : '';							 var suffix = that.attr('data-suffix');							 value += (value != '暂无' && isNotNull(suffix))? suffix : '';							 that.html(value);						 });						//返回按钮						 if(type==null||type==undefined){							 							 $("#total_distance").val(totalDistance);							 							 if($("#total_driveTime").val()!='0'&&($("#update_runTotalTime").html()=='暂无'||$("#update_runTotalTime").html()=='23:59:59')){								$("#update_runTotalTime").html($("#total_driveTime").val());								$("#update_avgSpeed").html($("#total_avgSpeed").val()+'(km/h)');								}						 }							 //type不为null则为点击左边卡片显示轨迹，统计信息按左边卡片来						 /*if(type!=null){							 $(".divchild-c").find('[data-name]').each(function(){								 var that = $(this);								 var key = that.attr('data-name');								 //选中的卡片								 var card = $(".mapMonitorBoxBorder-select");								 if(card.find("."+key).length>0){									 var span_get = $(".mapMonitorBoxBorder-select").find("."+key)[0];									 var value = $("."+key).html();									 var suffix = that.attr('data-suffix');									 value += (value != '暂无' && isNotNull(suffix))? suffix : '';									 that.html(value);								 }							 });						 }*/					}else{						alertMessage("查询轨迹统计信息出错，请联系管理员！",0);					}					closePicture();				}		});			},	//标出轨迹点(画轨迹只标出起止点,即type为null,type不为空时显示所有轨迹点)	_drawingMapTrajectoryMarker : function(pointInfoArr,type){		/*if(pointInfoArr.length > 0){			var centerPoint = new BMap.Point(pointInfoArr[0].lng,pointInfoArr[0].lat);					this._mapObj.setZoom(13);			this._mapObj.setCenter(centerPoint);		}*/				OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var carMapInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp">速度：<font>'+(isNotNull(carMapInfo.speed) ? carMapInfo.speed : 0)+'(km/h)</font></p>');			        message.push('<p class="Map_popUp">大概地点：<font>'+address+'</font></p>');			        message.push('<p class="Map_popUp">定位时间：<font>'+handlerUndefined(carMapInfo.obdDate)+'</font></p>');			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:330});			        that.openInfoWindow(infoWindow);			      			       });			});		};		var map = this._mapObj,			gc = this._gc,			fristPointDate,			lastPointDate;				if(!type){//初次画轨迹			if(pointInfoArr.length > 0){				//添加起始点				var start_pointInfo = pointInfoArr[0],				start_point = new BMap.Point(start_pointInfo.lng,start_pointInfo.lat);								start_markerIcon = new BMap.Icon(ctx + "/img/map/start_icon.png", new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});				fristPointDate = start_pointInfo.obdDate;				start_marker = new BMap.Marker(start_point,{icon:start_markerIcon});								map.addOverlay(start_marker); 				var start_eventObj = new OpenInfoWindowsEvent(start_pointInfo,start_marker);				start_eventObj.blindOpenInfoWindowsEvent();				var end_pointInfo = pointInfoArr[pointInfoArr.length - 1],					end_point = new BMap.Point(end_pointInfo.lng,end_pointInfo.lat);									end_markerIcon = new BMap.Icon(ctx + "/img/map/end_icon.png", new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});					lastPointDate = end_pointInfo.obdDate;					end_marker = new BMap.Marker(end_point,{icon:end_markerIcon});				map.addOverlay(end_marker); 				var end_eventObj = new OpenInfoWindowsEvent(end_pointInfo,end_marker);				end_eventObj.blindOpenInfoWindowsEvent();				//告警点				this.drivingTrajectoryAlarmPoint(fristPointDate,lastPointDate);			}		}else{//显示所有轨迹点			drivingTrajectory._pointMarkers.length = 0;			for(var i=1; i < pointInfoArr.length-1; i++){				var pointInfo = pointInfoArr[i],					markerIcon = null,					point = new BMap.Point(pointInfo.lng,pointInfo.lat);					markerIcon = new BMap.Icon(ctx + "/img/map/route_direction_" + getCarDegree(pointInfo.direction) + ".png", 									new BMap.Size(12,12),{anchor: new BMap.Size(6, 6)});				if(markerIcon != null){					var marker = new BMap.Marker(point,{icon:markerIcon});					map.addOverlay(marker); 					var eventObj = new OpenInfoWindowsEvent(pointInfo,marker);					eventObj.blindOpenInfoWindowsEvent();										//将点覆盖物放到数组里					drivingTrajectory._pointMarkers.push(marker);				}			}		}			},	//告警点	drivingTrajectoryAlarmPoint : function(beginDate,endDate){		var map = this._mapObj,gc = this._gc;		var dataArr = this._trajectoryAlarmPointArr;		beginDate = (beginDate instanceof Date) ? beginDate.getTime():  beginDate.formatDate().getTime();		endDate = (endDate instanceof Date) ? endDate.getTime() : endDate.formatDate().getTime();		OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var alarmInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp"><span style=" width:62px;">工号：</span><font>'+handlerUndefined(alarmInfo.driverCode)+'</font><span style=" float: right;">驾驶员：<font>'+handlerUndefined(alarmInfo.driverName)+'</font></span></p>');			        message.push('<p class="Map_popUp"></p>');			        message.push('<p class="Map_popUp"><span style=" width:62px;">告警类型：</span><font>'+handlerUndefined(alarmInfo.alarmTypeName)+'</font></p>');			        message.push('<p class="Map_popUp"><span style=" width:62px;">大概地点：</span><font>'+address+'</font></p>');			        message.push('<p class="Map_popUp"><span style=" width:62px;">告警时间：</span><font>'+handlerUndefined(alarmInfo.alarmTime)+'</font></p>');			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:300});			        that.openInfoWindow(infoWindow);		       });			});		};		for(var i=0;i < dataArr.length; i++){			var alarmInfo = dataArr[i];			var alarmTime = alarmInfo.alarmTime.formatDate().getTime();			var iconSrc = ctx;			if(alarmTime >= beginDate && alarmTime <= endDate){				switch(alarmInfo.alarmTypeCode){					case '1004002':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_cx.png';						break;					case '1004003':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_dx.png';						break;					case '1004001':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jd.png';						break;					case '9002':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jj.png';						break;					case '9001':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jx.png';						break;					case '9003':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jz.png';						break;					case '9004':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_pl.png';						break;					case '269':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_kd.png';						break;				}				var markerIcon = new BMap.Icon(iconSrc, new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)}),				point = new BMap.Point(alarmInfo.lng,alarmInfo.lat);				var marker = new BMap.Marker(point,{icon:markerIcon});				map.addOverlay(marker);				var eventObj = new OpenInfoWindowsEvent(alarmInfo,marker);				eventObj.blindOpenInfoWindowsEvent();			}		}	},	//轨迹回放的频率，0.3秒一个点	_timerHandler : function(){		var isLast = drivingTrajectory.trajectoryRunning.gotoNextPoint();		if(isLast){			clearTimeout(drivingTrajectory.timer);			drivingTrajectory.trajectoryRunning.resetIndex(0);			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');			//进度条			$(".ui-slider-range").css("width","100%");			$(".ui-slider-handle").css("left","0%");		}else{			drivingTrajectory.timer = setTimeout(drivingTrajectory._timerHandler,300);		}	},	//绑定按钮点击事件	_initTimeBarBtn : function(){		//开始按钮		$(".trackStartBtn").click(function(){			$(".trackPauseBtn").removeClass('display');			$(".trackStartBtn").addClass('display');			drivingTrajectory._timerHandler();		});		//暂停按钮		$(".trackPauseBtn").click(function(){			clearTimeout(drivingTrajectory.timer);			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');		});		//返回按钮		$(".returnAllTrajectory").click(function(){			clearTimeout(drivingTrajectory.timer);			drivingTrajectory.trajectoryRunning.reset();			//去除速度曲线			drivingTrajectory.speedChart = null;			$("#speedCharts").html('');				$("#speedDiv").addClass('display');			$("#speedShow").addClass('display');			//刷新轨迹导出参数			$("#startTime").val($("#today").val()+' 00:00:00');			$("#stopTime").val($("#today").val()+' 23:59:59');			drivingTrajectory.clearOverlays();			//重新画轨迹			drivingTrajectory.trajectoryRunning = drivingTrajectory.drawingAllDrivingTrajectory();			//重新请求统计数据			drivingTrajectory._refreshTrackInfoDivInfo(vehicleId,deviceCode,_today+' 00:00:00',_today+' 23:59:59',null);			$('#mapParent').css('height',(clientHeight - 136) + "px");			$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');			$(".returnAllTrajectory").addClass('display');			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');			$(".trackStopBtn").removeClass('display');			$("#clickTrajectorySectionDiv").addClass('display');			$("#timeBarParentDiv").removeClass('display');			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');			$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");		});		//停止按钮		$(".trackStopBtn").click(function(){			clearTimeout(drivingTrajectory.timer);			drivingTrajectory.trajectoryRunning.reset();			$(".trackStartBtn").removeClass('display');			$(".trackPauseBtn").addClass('display');		});		//导出轨迹点		$("#exportPoint").click(function(){				var queryDate = $("#today").val();			var startTime = $("#startTime").val();			var stopTime = $("#stopTime").val();			var url = $(this).attr("rel_url");			url = url+'&startTime='+startTime+'&stopTime='+stopTime+'&queryDate='+queryDate;			window.location.href= url;		});		//显示所有轨迹点		$("#showAllPoint").click(function(){				drivingTrajectory._drawingMapTrajectoryMarker(drivingTrajectory.trajectoryRunning._pointInfoArr,'all');//			$(this).attr("disabled","disabled");			$(this).hide();			$("#clearAllPoint").removeClass("display");			$("#clearAllPoint").show();		});		//清除轨迹点		$("#clearAllPoint").click(function(){			drivingTrajectory.clearPointMarker();			$(this).hide();			$("#showAllPoint").show();		});	},	//点击分段信息显示分段轨迹	handlerVehicleBehaviorTrip : function(startDate,endDate){		//模拟停止按钮点击事件		$(".trackStopBtn").click();				function getCutName(name,cutLength){			return isNotNull(name) ? (name.length > cutLength ? name.substring(0,cutLength)+'...' : name) : '暂无';		}		clearTimeout(drivingTrajectory.timer);		//重新请求统计数据		drivingTrajectory._refreshTrackInfoDivInfo(_vehicleId,_deviceCode,startDate,endDate,'type');		drivingTrajectory.clearOverlays();		//刷新轨迹		drivingTrajectory.drawingDrivingTrajectoryByTime(startDate,endDate);		//刷新轨迹导出参数		$("#startTime").val(startDate);		$("#stopTime").val(endDate);				closePicture();		$(".returnAllTrajectory").removeClass('display');//removeParagraphInfo		$(".trackStartBtn").removeClass('display');		$(".trackStopBtn").removeClass('display');		$(".trackPauseBtn").addClass('display');		$("#timeBarParentDiv").addClass('display');		$("#clickTrajectorySectionDiv").removeClass('display');		$('#mapParent').css('height',(clientHeight - 136) + "px");		$('#playDiv').show();		$('#playDiv').animate( {'top' : (clientHeight - 100)}, 'slow');		$('#trajectorySectionTimes').html(dateFormat(startDate,'hh:mm:ss')+"~" +dateFormat(endDate,'hh:mm:ss'));	},	//根据时间画轨迹	drawingDrivingTrajectoryByTime : function(startDate,endDate){		var	allPointList = this._drivingTrajectoryDataArr;		var drivingTrajectoryPointList = new Array();		startDate = startDate.formatDate();		endDate = endDate.formatDate();		for(var i = 0;i < allPointList.length; i++){			var pointInfo = allPointList[i];			var pointDate = pointInfo.obdDate.formatDate();			if(pointDate >= startDate && pointDate <= endDate){				drivingTrajectoryPointList.push(pointInfo);			}		}		drivingTrajectory._drawingMapTrajectoryLine(drivingTrajectoryPointList);		drivingTrajectory._drawingMapTrajectoryMarker(drivingTrajectoryPointList);		//显示速度曲线		drivingTrajectory.drawingSpeedCharts(drivingTrajectoryPointList);		//重新实例轨迹对象		drivingTrajectory.trajectoryRunning = new TrajectoryRunning(drivingTrajectoryPointList,this._mapObj);			//实例化滑动条		drivingTrajectory.drawingTrajectorySlider();	},	//生成速度曲线图	drawingSpeedCharts : function(pointInfoArr){		drivingTrajectory.speedChart = null;		$("#speedCharts").html('');		//速度数组		var speed_data = [];		//循环添加速度点		for(var i=0;i < pointInfoArr.length;i++){			//速度对象			var speedJson = {};			var speed = pointInfoArr[i].speed;			speedJson = {y:speed};			speed_data.push(speedJson);		}					//实例化曲线图		drivingTrajectory.speedChart = new Highcharts.Chart({			chart: { renderTo : 'speedCharts',backgroundColor: 'rgba(255, 255, 255, 0.3)'},	        colors:["blue"],			tooltip: {	            formatter: function () {	                return '<b>' + this.y + 'km/h</b>';	            }	        },			plotOptions: {	            series: {	                point: {	                    events: {	                        click: function () {	                            showThisPosition(this.x);	                        }	                    }	                }	            }	        },			yAxis: {	            min: 0,				tickPixelInterval: 10 ,				gridLineWidth: 0,				title: {					enabled: false				},				plotLines: [{   	                    color: 'red',	                    dashStyle: 'Solid',	                    width: 1.5,	                    value: 70,  	                    zIndex: 5,						label: {							text: '超速值',							style: {								color: 'red',								fontWeight: 'bold'							}						}	                }]	        },			xAxis: {				labels: {					enabled: false				}			},	        title: {	            text: ""	        },			legend:{				enabled: false			},			credits:{				enabled: false			},	        series: [{	            type: 'line',	            name: 'Observations',	            data: speed_data,	            marker: {	                radius: 1	            }	        }]	    });	},	//实例化进度条	drawingTrajectorySlider : function(){		$("#slider" ).slider({			range: "max",			max:drivingTrajectory.trajectoryRunning._pointInfoArr.length-1,			slide: function( event, ui ) {					if(ui.value < drivingTrajectory.trajectoryRunning._pointIndex - 1){					//回退时					drivingTrajectory.trajectoryRunning._pointIndex = ui.value;						drivingTrajectory.trajectoryRunning._linePointArr.length = ui.value;						drivingTrajectory.trajectoryRunning._speedPointArr.length = ui.value;					}					drivingTrajectory.trajectoryRunning.gotoNextPoint();			}		});		$(".ui-slider-handle").css("border","1px solid");		//显示实时车速		$("#speedShow").removeClass('display');		$("#carSpeed").html("0km/h");	},	//清除覆盖点	clearPointMarker : function(){		for(var i=0;i<drivingTrajectory._pointMarkers.length;i++){			drivingTrajectory._mapObj.removeOverlay(drivingTrajectory._pointMarkers[i]);		}	},	//新方法，根据封装的熄火分段显示分段列表	drawingRouteSectionList : function (insertDivId,times,vehicleId,deviceCode){		if(times.length==0){			var none = '<div style="height: 10%;font-size: 14px;text-align: center; padding: 5%">暂无数据</div>';			$("#" + insertDivId).html(none);			return;		}				function getCutName(name,cutLength){			return isNotNull(name) ? (name.length > cutLength ? name.substring(0,cutLength)+'...' : name) : '暂无';		}				var clickEventHtml = 'onclick="drivingTrajectory.handlerVehicleBehaviorTrip(\'{start_time}\',\'{end_time}\');" style="cursor: pointer;" ';		//异常点熄火记录		var badHtml = new Array();		badHtml.push('<div class="mapMonitorBox-edit" style="width: 95%;height: 50px;margin: 10px auto;" >');		badHtml.push('	<div class="{mapMonitorBoxTitle}">');		badHtml.push('	  <div class="mapMonitorBoxTitleText" style="padding: 0px !important;margin: 15px 0 0 5px !important; line-height:20px !important; width:auto !important;">{time_span}</div>');		badHtml.push('	  <div class="mapMonitorBoxTitleText" style="padding: 0px !important;margin: 15px 10px 0 5px !important; line-height:20px !important; width:auto !important; float:right;">点火时长:{drive_time}</div>');		badHtml.push('	</div>');			badHtml.push('</div>');		badHtml = badHtml.join('');				var insertHtml = new Array();				//去掉最后的逗号		times = times.substring(0,times.length-1);				var html = '<div class="cst_loading" id="route_cst_load_div" style="width:20%;top:10%;"><span></span><em></em></div>';		$(html).appendTo("#behaviorListDiv");				$.ajax({			url : ctx + '/resourcesManage/vehicleTrajectory/getRouteSections.do',			type : 'POST',			data : {				vehicleId : vehicleId,				deviceCode : deviceCode,				times : times,				isRunning : drivingTrajectory.isRunning			},			dataType : 'JSON', 			cache : false,			success : function(data){				$("#route_cst_load_div").remove();				if(data.states == 200){					var behaviorList = data.drivingDataList;					if(behaviorList!=null){						/**2016-05-24更新总运行时长**/						//总运行时长						var totalDriveTime = 0;						for(var i=behaviorList.length-1; i>=0; i--){							var behavior = behaviorList[i];							//累计运行时间相加							totalDriveTime+=behavior.TOTALSECONDS;							var distance = behavior.DISTANCE,								fuel_consum_total = behavior.FUEL_CONSUM_TOTAL,													drive_time = behavior.DRIVE_TIME,								totalSeconds = behavior.TOTALSECONDS,								speed_average =0,								fuel_consum_average = behavior.FUEL_CONSUM_AVERAGE!=null?behavior.FUEL_CONSUM_AVERAGE:0,								alarm_count = behavior.ALARM_COUNT,								start_time = behavior.START_TIME,								end_time = behavior.END_TIME,								index = behavior.INDEX,								time_span = new Array();								clickEvent = null,								mapMonitorBoxTitle = 'mapMonitorBoxTitle';											if(distance==-1 || totalSeconds==-1 || totalSeconds==0){									speed_average=0;								}else{									speed_average = Math.round(distance / (totalSeconds/3600).toFixed(4));								}								clickEvent = clickEventHtml.format({									start_time : dateFormat(start_time,'yyyy-MM-dd hh:mm:ss'),									end_time : dateFormat(end_time,'yyyy-MM-dd hh:mm:ss')								});								time_span.push(dateFormat(start_time,'hh:mm:ss'));								time_span.push("~" +dateFormat(end_time,'hh:mm:ss'));								time_span = time_span.join('');							//行程时间<=5分钟或者里程<=2Km不做具体显示//								alert(totalSeconds+"||"+distance);							if(totalSeconds<=5*60||distance<=2){								var badJSON = {										time_span : time_span,										drive_time : drive_time,										mapMonitorBoxTitle : mapMonitorBoxTitle								};								insertHtml.push(badHtml.format(badJSON)); 							}else{								var formatJSON = {										time_span : time_span,										start_time : start_time,										end_time : end_time,										distance : distance,										fuel_consum_total : fuel_consum_total,										speed_average : speed_average,										drive_time : drive_time,										fuel_consum_average : fuel_consum_average,										alarm_count : alarm_count,										index : index,										clickEvent : clickEvent,										mapMonitorBoxTitle : mapMonitorBoxTitle									};																if(behaviorList[0].ENERGYTYPEID==3){									//正常点熄火记录									var baseHtml = new Array();									baseHtml.push('<div class="section_{index} mapMonitorBoxBorder-unselect" {clickEvent}>');									baseHtml.push('<div class="mapMonitorBox-edit">');									baseHtml.push('	<div class="{mapMonitorBoxTitle}">');									baseHtml.push('	  <div class="mapMonitorBoxTitleText">{time_span}</div>');									baseHtml.push('	</div>');									baseHtml.push('	<div class="mapMonitorBoxContent">');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">里程</span></br><span class="totalDistance">{distance}(km)</span></div></div>');																		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight" id="totalFuel">能耗</span></br><span class="totalFuel">{fuel_consum_total}(kWh)</span></div></div>');									baseHtml.push('	</div>');									baseHtml.push('	<div class="mapMonitorBoxContent">');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight"  id="hundredKMFuel">百公里能耗</span></br><span class="hundredKMFuel">{fuel_consum_average}(kWh)</span></div></div>');										baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">点火时长</span></br><span class="runTotalTime">{drive_time}</span></div></div>');									baseHtml.push('	</div>');									baseHtml.push('	<div class="mapMonitorBoxContent">');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">告警次数</span></br><span>{alarm_count}(次)</span></div></div>');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">平均速度</span></br><span class="avgSpeed">{speed_average}(km/h)</span></div></div>');									baseHtml.push('	</div>');									baseHtml.push('</div>');									baseHtml.push('</div>');									baseHtml = baseHtml.join('');								}else{									//正常点熄火记录									var baseHtml = new Array();									baseHtml.push('<div class="section_{index} mapMonitorBoxBorder-unselect" {clickEvent}>');									baseHtml.push('<div class="mapMonitorBox-edit">');									baseHtml.push('	<div class="{mapMonitorBoxTitle}">');									baseHtml.push('	  <div class="mapMonitorBoxTitleText">{time_span}</div>');									baseHtml.push('	</div>');									baseHtml.push('	<div class="mapMonitorBoxContent">');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">里程</span></br><span class="totalDistance">{distance}(km)</span></div></div>');																		baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight" id="totalFuel">能耗</span></br><span class="totalFuel">{fuel_consum_total}(L)</span></div></div>');									baseHtml.push('	</div>');									baseHtml.push('	<div class="mapMonitorBoxContent">');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight"  id="hundredKMFuel">百公里能耗</span></br><span class="hundredKMFuel">{fuel_consum_average}(L)</span></div></div>');										baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">点火时长</span></br><span class="runTotalTime">{drive_time}</span></div></div>');									baseHtml.push('	</div>');									baseHtml.push('	<div class="mapMonitorBoxContent">');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">告警次数</span></br><span>{alarm_count}(次)</span></div></div>');									baseHtml.push('	  <div class="mapMonitorBoxContentSquare" style="width:49%"><div style="width: 100%;"><span class=" font-weight">平均速度</span></br><span class="avgSpeed">{speed_average}(km/h)</span></div></div>');									baseHtml.push('	</div>');									baseHtml.push('</div>');									baseHtml.push('</div>');									baseHtml = baseHtml.join('');								}								insertHtml.push(baseHtml.format(formatJSON));							}								}					}					$("#" + insertDivId).html(insertHtml.join(''));					$("#" + insertDivId + " .mapMonitorBoxBorder-unselect").click(function() {						if(this.onclick){							$("#behaviorListDiv .mapMonitorBoxBorder-unselect").removeClass("mapMonitorBoxBorder-select");							$(this).addClass("mapMonitorBoxBorder-select");						}					});										/**2016-05-24更新**/					//更新总运行时长					if(totalDriveTime>0){						var totalDistance = $("#total_distance").val();						var totalDriveTime_str = secondFormat(totalDriveTime, 'hh:mm:ss');						var update_speed = Math.round(totalDistance / (totalDriveTime / 3600).toFixed(2));												$("#total_driveTime").val(totalDriveTime_str);						$("#total_avgSpeed").val(update_speed);						if($("#update_runTotalTime").html()=='暂无'||$("#update_runTotalTime").html()=='23:59:59'){							$("#update_runTotalTime").html(totalDriveTime_str);							$("#update_avgSpeed").html(update_speed+'(km/h)');											}					}					}else{					alertMessage("查询轨迹分段信息出错，请联系管理员！",0);				}			}		});		}};//返回车辆管理页面function returnList(){	location.href = ctx+"/resourcesManage/vehicleResources/index.do";}