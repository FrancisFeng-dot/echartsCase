<%@ page language="java" import="java.util.*" pageEncoding="UTF-8" %><!DOCTYPE html><html lang="en"><head>    <%@include file="/commons/common.jsp" %>    <meta charset="UTF-8">    <title>chart</title>    <style>        .MacroShow_select .banner_arrows {            font-size: 14px !important;        }        .container {            width: 100%;            min-height: 100%;            position: relative;            margin: 0 auto;        }        .chart-group {            position: relative;            width: 48%;            float: left;        }        .chart-group2 {            width: 98.4%;        }        .chart {            /*width: 805px;*/            height: calc(100vh * 0.4);        }        .chart > div {            background-color: #f3f3f3;            border-radius: 4px;        }        .chart-group2 .chart {            /*width: 1650px;*/            height: calc(100vh * 0.53);        }        .marginLeft40 {            margin-left: 40px;        }        .tit {            line-height: 40px;        }        .spTit {            width: 100%;        }        .tlb {            float: right;        }        .ttlb {            float: right;        }        #chart1 > div {            background-color: #000000 !important;        }        html, body {            width: 100%;            height: 100%;            margin: 0;            padding: 0;            overflow: hidden;        }        #map {            width: 100%;            height: calc(100vh * 0.53);        }    </style>    <script src="${ctx}/js/My97DatePicker/WdatePicker.js?v=${rv}"></script>    <script type="text/javascript" src="${ctx}/js/validation/jquery.validationEngine.js?v=${rv}"></script>    <script type="text/javascript" src="${ctx}/js/validation/languages/jquery.validationEngine-zh_CN.js?v=${rv}"></script></head><body id="app"><input type="hidden" id="deptId" name="deptId"/> <!-- 机构ID，默认为登录人机构ID --><input type="hidden" id="vehicleId" name="vehicleId"/> <!-- 机构ID，默认为登录人机构ID --><div class="widget-box" style=" margin: 0;">    <div class="widget-content center MacroShow_box01" style=" background-color: #eee;">        <div class="MacroShow_select">            <div id="SelectBox1"><span class="banner_arrows">${sessionScope.ac.deptName} - ></span></div>        </div>    </div></div><div class="container">    <div class="chart-group chart2 chart1 chart3">        <div class="tit">            告警时间分布统计            <lable class="ttlb">                <input id="bt" type="text" class="span8 m-wrap" style="width: 80px !important;"                       value="${fn:substring(startTime, 0, 10)}" blurMatch="both"                       onclick="WdatePicker({dateFmt:'yyyy-MM-dd',maxDate:'#F{$dp.$D(\'et\')}'})">                至&nbsp;                <input id="et" type="text" class="span6 m-wrap" style="width: 80px !important;"                       value="${fn:substring(stopTime, 0, 10)}" blurMatch="both"                       onclick="WdatePicker({dateFmt:'yyyy-MM-dd',minDate:'#F{$dp.$D(\'st\')}',maxDate:'%y-%M-%d'})">                &nbsp;<button onclick="vm.selectChart1()">查询</button>            </lable>        </div>        <div class="chart" id="chart1"></div>    </div>    <div class="chart-group chart2 marginLeft40 chart3">        <div class="tit">驾驶时长告警分布统计</div>        <div class="chart" id="chart2"></div>    </div>    <div class="chart-group chart-group2">        <div class="tit spTit">            告警位置分布统计            <lable class="tlb">                <input id="beginTime" type="text" class="span8 m-wrap" style=" width: 110px !important;"                       value="${fn:substring(startTime, 0, 16)}" blurMatch="both"                       onclick="WdatePicker({dateFmt:'yyyy-MM-dd HH:mm',maxDate:'#F{$dp.$D(\'endTime\')}'})">                至&nbsp;                <input id="endTime" type="text" class="span6 m-wrap" style=" width: 110px !important;"                       value="${fn:substring(stopTime, 0, 16)}" blurMatch="both"                       onclick="WdatePicker({dateFmt:'yyyy-MM-dd HH:mm',minDate:'#F{$dp.$D(\'beginTime\')}',maxDate:'%y-%M-%d 23:59'})">                &nbsp;<button onclick="vm.selectChart3()">查询</button>                <button onclick="javascript:shReport();">伸展/收缩</button>            </lable>        </div>        <div id="map"></div>        <canvas id="canvas"></canvas>    </div></div></body><script src="${ctx}/js/jquery.min.js?v=${rv}"></script><script src="${ctx}/js/vue/vue.min.js?v=${rv}"></script><script src="${ctx}/js/echarts/echarts.min.js?v=${rv}"></script><script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=${bMapAK}"></script><script type="text/javascript" src="${ctx}/js/map/MarkerClusterer.js?v=${rv}"></script><script type="text/javascript" src="${ctx}/js/map/TextIconOverlay.js?v=${rv}"></script><!-- 机构下拉框 --><script type="text/javascript" src="${ctx}/js/utils/ajaxSelectCas.js?v=${rv}"></script><script>    var vm;    var isShow = 1;    var parDeptId = ac.deptId;    $(document).ready(        function () {            init();        });    function init() {        $("#deptId").val(parDeptId);        var query_dept = {            deptId: parDeptId,            fieldtext: "deptName",            fieldValue: "deptId"        };        //下拉框ID、条件、div的ID、用来输出选中的下拉框值、回调方法        $.initSelect.initFirstSelect('select', query_dept, 'SelectBox1', 'deptId', callback, 'vehicleId', true);//    formObj = $.toForm.init();//    var grid = $.grid.init('grid_device', 'deviceResourcesServiceImpl', orgGridRenderer);        query();    }    //选中机构下拉宽后  回调方法    function callback(data, selValue) {        if (selValue.startsWith('cst_')) {            parDeptId = $("#deptId").val();            showView(parDeptId, undefined);        } else {            showView(undefined, selValue)        }    }    function query() {//    var query = serializeArrayByForm('query_user');//    if (isNotNull(parDeptId)) {//        query['deptId'] = parDeptId;//        query['new_page_start'] = 1;//    }//    $('#grid_device').trigger('grid.query', [query]);    }    $(function () {        showView(ac.deptId, undefined);    });    function showView(deptId, vehicleId) {        var myChart1 = echarts.init(document.getElementById('chart1'));        var myChart2 = echarts.init(document.getElementById('chart2'));        var all = [], obd = [], dds = [], adas = [];        var map = new BMap.Map("map");        map.enableScrollWheelZoom();        var point = new BMap.Point(117.000, 33.000);        map.centerAndZoom(point, 5);        var markerClusterer = new BMapLib.MarkerClusterer(map, {maxZoom: 16});        // 定义一个控件类,即function        function ZoomControl() {            // 默认停靠位置和偏移量            this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;            this.defaultOffset = new BMap.Size(10, 10);        }        // 通过JavaScript的prototype属性继承于BMap.Control        ZoomControl.prototype = new BMap.Control();        // 自定义控件必须实现自己的initialize方法,并且将控件的DOM元素返回        // 在本方法中创建个div元素作为控件的容器,并将其添加到地图容器中        ZoomControl.prototype.initialize = function (map) {            // 创建一个DOM元素            var div = document.createElement("div");            var texts = ["告警统计", "OBD", "DDS", "ADAS"];            var images = ["ALL.png", "OBD.png", "DDS.png", "ADAS.png"];            for (var i = 0; i < texts.length; i++) {                var li = document.createElement("li");                li.id = i;                li.appendChild(document.createTextNode(texts[i]));                li.style.listStyleImage = "url('" + ctx + "/img/map/" + images[i] + "')";                li.style.padding = "5px";                li.style.fontSize = "12px";                li.style.font = "bold 5px";                li.style.color = "white";                li.onclick = function (e) {                    changeMarkers(e.target.id);                }                div.appendChild(li);            }            // 设置样式            div.style.cursor = "pointer";            div.style.backgroundColor = "#9f9f9f";            // 添加DOM元素到地图中            map.getContainer().appendChild(div);            // 将DOM元素返回            return div;        }        // 创建控件        var myZoomCtrl = new ZoomControl();        // 添加到地图当中        map.addControl(myZoomCtrl);        function changeMarkers(index) {            $('#0').css('backgroundColor', '#9f9f9f');            $('#1').css('backgroundColor', '#9f9f9f');            $('#2').css('backgroundColor', '#9f9f9f');            $('#3').css('backgroundColor', '#9f9f9f');            markerClusterer.clearMarkers();            map.clearOverlays();            $('#' + index).css('backgroundColor', '#6f6f6f');            switch (index) {                case '0':                    showMarkers(all);                    break;                case '1':                    showMarkers(obd);                    break;                case '2':                    showMarkers(dds);                    break;                case '3':                    showMarkers(adas);                    break;            }        }        function showMarkers(points) {            var markers = [];            var pts = [];            for (var i = 0; i < points.length; i++) {                var point = points[i];                var pt = new BMap.Point(point.longitude, point.latitude);                pts.push(pt);                var marker = new BMap.Marker(pt)                markers.push(marker);            }            map.setViewport(pts);            markerClusterer.addMarkers(markers);        }        vm = new Vue({            el: '#app',            data: {                chart1: {                    obd: [],                    dds: [],                    adas: [],                    max: 0                },                bt: '',                et: '',                beginTime: '',                endTime: ''            },            methods: {                post: function (url, data, callback, errCallback) {                    $.ajax({                        type: 'POST',                        url: url,                        dataType: 'json',                        // data:JSON.stringify(data),                        data: data,                        // contentType: "application/json; charset=utf-8",                        success: function (data) {                            if (data.code != '0') {                                alert(data.msg);                            } else {                                callback(data);                            }                        },                        error: function (err) {                            layer.msg('请求失败，请稍后再试');                            if (errCallback) errCallback(err);                        }                    })                },                getOption1: function () {                    var option1 = {                        backgroundColor: '#404a59',                        color: [                            '#dd4444', '#fec42c', '#80F1BE'                        ],                        legend: {                            y: 'top',                            data: ['OBD', 'DDS', 'ADAS'],                            textStyle: {                                color: '#fff',                                fontSize: 16                            }                        },                        grid: {                            x: '10%',                            x2: 150,                            y: '18%',                            y2: '10%'                        },                        tooltip: {                            trigger: 'axis',                            axisPointer: {                                type: 'shadow'                            },                            padding: 10,                            backgroundColor: '#222',                            borderColor: '#777',                            borderWidth: 1,                            formatter: function (obj) {                                var value = obj.value;                                return '<div style="border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px">'                                    + obj.seriesName + ' ' + value[0] + '时：'                                    + '</div>'                                    + '次数' + '：' + value[1] + '<br>'                            }                        },                        xAxis: {                            type: 'value',                            name: '小时',                            nameGap: 16,                            nameTextStyle: {                                color: '#fff',                                fontSize: 14                            },                            max: 24,                            splitLine: {                                show: false                            },                            axisLine: {                                lineStyle: {                                    color: '#eee'                                }                            }                        },                        yAxis: {                            type: 'value',                            name: '次数',                            nameLocation: 'end',                            nameGap: 20,                            nameTextStyle: {                                color: '#fff',                                fontSize: 16                            },                            axisLine: {                                lineStyle: {                                    color: '#eee'                                }                            },                            splitLine: {                                show: false                            }                        },                        visualMap: [                            {                                left: 'right',                                top: '10%',                                dimension: 1,                                min: 0,                                max: vm.chart1.max,                                itemWidth: 30,                                itemHeight: 60,                                calculable: true,                                precision: 0.1,                                text: ['圆形大小：次数'],                                textGap: 30,                                textStyle: {                                    color: '#fff'                                },                                inRange: {                                    symbolSize: [10, 70]                                },                                outOfRange: {                                    symbolSize: [10, 70],                                    color: ['rgba(255,255,255,.2)']                                },                                controller: {                                    inRange: {                                        color: ['#c23531']                                    },                                    outOfRange: {                                        color: ['#444']                                    }                                }                            },                            {                                left: 'right',                                bottom: '5%',                                dimension: 1,                                min: 0,                                max: 50,                                itemHeight: 60,                                calculable: true,                                precision: 0.1,                                text: ['明暗：次数'],                                textGap: 30,                                textStyle: {                                    color: '#fff'                                },                                inRange: {                                    colorLightness: [1, 0.5]                                },                                outOfRange: {                                    color: ['rgba(255,255,255,.2)']                                },                                controller: {                                    inRange: {                                        color: ['#c23531']                                    },                                    outOfRange: {                                        color: ['#444']                                    }                                }                            }                        ],                        series: [                            {                                name: 'OBD',                                type: 'scatter',                                itemStyle: {                                    opacity: 0.8,                                    shadowBlur: 10,                                    shadowOffsetX: 0,                                    shadowOffsetY: 0,                                    shadowColor: 'rgba(0, 0, 0, 0.5)'                                },                                data: vm.chart1.obd                            },                            {                                name: 'DDS',                                type: 'scatter',                                itemStyle: {                                    opacity: 0.8,                                    shadowBlur: 10,                                    shadowOffsetX: 0,                                    shadowOffsetY: 0,                                    shadowColor: 'rgba(0, 0, 0, 0.5)'                                },                                data: vm.chart1.dds                            },                            {                                name: 'ADAS',                                type: 'scatter',                                itemStyle: {                                    opacity: 0.8,                                    shadowBlur: 10,                                    shadowOffsetX: 0,                                    shadowOffsetY: 0,                                    shadowColor: 'rgba(0, 0, 0, 0.5)'                                },                                data: vm.chart1.adas                            }                        ]                    };                    return option1;                },                selectChart1: function () {                    var startTime = $("#bt").val();                    var stopTime = $("#et").val();                    vm.post('${ctx}/statistics/alarmDist/alarm.do', {                        startTime: startTime,                        stopTime: stopTime,                        deptId: deptId,                        vehicleId: vehicleId                    }, function (resp) {                        vm.chart1 = resp.data;                        myChart1.setOption(vm.getOption1());                    });                },                selectChart3: function () {                    var startTime = $("#beginTime").val();                    var stopTime = $("#endTime").val();                    vm.post('${ctx}/statistics/alarmDist/alarmDict.do', {                        startTime: startTime,                        stopTime: stopTime,                        deptId: deptId,                        vehicleId: vehicleId                    }, function (resp) {                        all = [], obd = [], dds = [], adas = [];                        markerClusterer.clearMarkers();                        map.clearOverlays();                        for (var i = 0; i < resp.data.length; i++) {                            var point = resp.data[i];                            all.push(point);                            switch (point.alarmType) {                                case 0:                                    obd.push(point);                                    break;                                case 1:                                    dds.push(point);                                    break;                                case 2:                                    adas.push(point);                                    break;                            }                        }                        showMarkers(all);                    });                },                getTitle: function (type) {                    var title = '';                    switch (type) {                        case 0:                            title = 'OBD';                            break;                        case 0:                            title = 'DDS';                            break;                        case 0:                            title = 'ADAS';                            break;                        default:                            title = 'OBD';                    }                    return title                }            }        });        var hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a', '7a', '8a', '9a', '10a', '11a', '12p', '1p', '2p', '3p', '4p', '5p', '6p', '7p', '8p', '9p', '10p', '11p'];        var days = ['OBD', 'DDS', 'ADAS'];        var data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4]];        var option2 = {            tooltip: {                position: 'top'            },            title: [],            singleAxis: [],            series: []        };        echarts.util.each(days, function (day, idx) {            option2.title.push({                textBaseline: 'middle',                top: (idx + 0.5) * 100 / 3 + '%',                text: day            });            option2.singleAxis.push({                left: 150,                type: 'category',                boundaryGap: false,                data: hours,                top: (idx * 100 / 3 + 3) + '%',                height: (100 / 3 - 10) + '%',                axisLabel: {                    interval: 2                }            });            option2.series.push({                singleAxisIndex: idx,                coordinateSystem: 'singleAxis',                type: 'scatter',                data: [],                symbolSize: function (dataItem) {                    return dataItem[1] * 4;                }            });        });        echarts.util.each(data, function (dataItem) {            option2.series[dataItem[0]].data.push([dataItem[1], dataItem[2]]);        });        // 使用刚指定的配置项和数据显示图表。        myChart1.setOption(vm.getOption1());        myChart2.setOption(option2);        setTimeout(function () {            window.onresize = function () {                myChart1.resize();                myChart2.resize();            }        }, 200);        vm.selectChart1();        vm.selectChart3();    }    function shReport() {        console.log(isShow);        if (isShow) {            $(".chart3").hide();            isShow = 0;            $("#map").css("height", "100vh");        } else {            $(".chart3").show();            isShow = 1;            $("#map").css("height", "53vh)");        }    }</script></html>