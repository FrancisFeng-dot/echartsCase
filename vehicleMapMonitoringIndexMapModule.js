//定义一个轨迹播放对象function TrajectoryRunning(pointInfoArr,map){	this._pointInfoArr = pointInfoArr;	this._map = map;	this._pointIndex = 0;	this._linePointArr = new Array();}TrajectoryRunning.prototype.gotoNextPoint = function(){	function createLinePoint(pointInfo,type){		var point = new BMap.Point(parseFloat(pointInfo.lng),parseFloat(pointInfo.lat));		var markerIcon = new BMap.Icon(ctx + ((type == 'begin') ? "/img/map/start_icon.png" : "/img/map/end_icon.png"), new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});		var marker = new BMap.Marker(point,{icon:markerIcon});		map.addOverlay(marker); 	}	var map = this._map;	var pointInfoArr = this._pointInfoArr;	var pointIndex = this._pointIndex;	var linePointArr = this._linePointArr;	var isLast = false;	map.clearOverlays();	if(pointIndex < pointInfoArr.length ){		var pointInfo = pointInfoArr[pointIndex];		var pt = new BMap.Point(parseFloat(pointInfo.lng),parseFloat(pointInfo.lat)),			degree = getCarDegree(pointInfo.direction),			carIcon = new BMap.Icon(ctx+"/img/map/car_driving_"+degree+".png", new BMap.Size(35,35)),			marker = new BMap.Marker(pt,{icon:carIcon});        map.addOverlay(marker);        map.setCenter(pt);	    if( pointIndex == 0){	    	 map.setZoom(13);	    }        linePointArr.push(pt);		this._pointIndex++;		isLast = false;	}else{		createLinePoint(pointInfoArr[linePointArr.length - 1],'end');		//this.reset();		isLast = true;	}	createLinePoint(pointInfoArr[0],'begin');    if(linePointArr.length > 1){    	var routeline = new BMap.Polyline(linePointArr, {strokeColor:"#0000ff", strokeWeight:4, strokeOpacity:0.8});		map.addOverlay(routeline);    }    return isLast;};TrajectoryRunning.prototype.resetIndex = function(){	this._pointIndex = 0;	this._linePointArr = new Array();};TrajectoryRunning.prototype.reset = function(){	this.resetIndex();	vehicleMapMonitoringIndexMapModule.clearOverlays();	var pointInfoArr = this._pointInfoArr;	vehicleMapMonitoringIndexMapModule._drawingMapTrajectoryLine(pointInfoArr);	vehicleMapMonitoringIndexMapModule._drawingMapTrajectoryMarker(pointInfoArr);};//定义一个饼图覆盖物对象function PieChartOverlay(deptMapInfo) {	var that = this;	this._point = new BMap.Point(parseFloat(deptMapInfo.lng),			parseFloat(deptMapInfo.lat));	this._deptMapInfo = deptMapInfo;	this._createPieChatData = function() {		var deptMapInfo = this._deptMapInfo;		//饼状图		var effCount = deptMapInfo.countCarFault + deptMapInfo.countCarOff				+ deptMapInfo.countCarOn;		effCount = effCount == undefined ? 0 : effCount;		//计算点火中车辆的百分比		var carOnPercentage = effCount > 0 ? deptMapInfo.countCarOn / effCount				* 100 : 0;		carOnPercentage = parseFloat(carOnPercentage.toFixed(2));		var carOnlist = [ '点火', carOnPercentage ];		//计算熄火中车辆的百分比		var carOffPercentage = effCount > 0 ? deptMapInfo.countCarOff				/ effCount * 100 : 0;		carOffPercentage = parseFloat(carOffPercentage.toFixed(2));		var carOfflist = [ '熄火', carOffPercentage ];		//计算停运车辆的百分比		var carFaultPercentage = effCount > 0 ? (100 - carOnPercentage - carOffPercentage)				: 0;		carFaultPercentage = parseFloat(carFaultPercentage.toFixed(2));		var carFaultlist = [ '停运', carFaultPercentage ];		//饼图数据数组		var effAry = new Array(carOnlist, carOfflist, carFaultlist);		//生成饼图				var chart = new Highcharts.Chart( {			chart : { 				renderTo : deptMapInfo.deptId,backgroundColor : 'rgba(255, 255, 255, 0)', 				plotBorderColor : null, plotBackgroundColor : null,plotBackgroundImage : null, 				plotBorderWidth : null, plotShadow : false, margin:[18,2,2,2],type: 'pie',				events:{					click:function(){						that.showPieChartInfoWindow();		            }}				},			title : { text : deptMapInfo.deptName , style: {color: 'black',fontSize:'12px',fontWeight: 'bold',}},			colors:['#17F928','#9E9E9E','#f30000'],			tooltip : {enabled: false,formatter : function() {		//						return this.point.name +'<b>:</b>'+ this.point.percentage +'%';						},				style: {					color: '#333333',					fontSize: '10px'				}			},			plotOptions : {				pie : { 					allowPointSelect : false, 					cursor : 'pointer',					dataLabels : { enabled : false},					events : {						click : function(){							that.showPieChartInfoWindow();						}					}				}			},			series : [ { type : 'pie', data : effAry } ]		});		return chart;	};	this.showPieChartInfoWindow = function(){		var point = this._point;		var deptMapInfo = this._deptMapInfo;		var map = this._map;		var carTotalNums = deptMapInfo.countCarOn + deptMapInfo.countCarOff + deptMapInfo.countCarFault;		var message = new Array();		message.push("<p class='Map_popUp_title'>"+deptMapInfo.deptName+"</p>");		message.push("<p class='Map_popUp'><span>总数：<font>"+carTotalNums+"</font>辆</span>点火：<font>"+deptMapInfo.countCarOn+"</font>辆</p>");		message.push("<p class='Map_popUp'><span>熄火：<font>"+deptMapInfo.countCarOff+"</font>辆</span>停运：<font>"+deptMapInfo.countCarFault+"</font>辆</p>");		message.push("<p class='Map_popUp_btn'><a onClick=\"vehicleMapMonitoringIndexControl.deptClick('"+deptMapInfo.deptId+"','select')\">查看下级机构</a></p>");		var infoWindow = new BMap.InfoWindow(message.join(''),{width:280});		map.openInfoWindow(infoWindow,point);					};	this._bindingMouseenterEvent = function(chartObj){		var point = this._point;		var deptMapInfo = this._deptMapInfo;		var map = this._map;		$("#"+deptMapInfo.deptId).mouseenter(function(){			var message = new Array();			message.push("<p class='Map_popUp_title'>"+deptMapInfo.deptName+"</p>");			message.push("<p class='Map_popUp'><span>熄火：<font>"+deptMapInfo.countCarOff+"</font>辆</span>点火：<font>"+deptMapInfo.countCarOn+"</font>辆</p>");			message.push("<p class='Map_popUp'>停运：<font>"+deptMapInfo.countCarFault+"</font>辆</p>");			message.push("<p class='Map_popUp_btn'><a onClick=\"vehicleMapMonitoringIndexControl.deptClick('"+deptMapInfo.deptId+"','select')\">查看下级机构</a></p>");			var infoWindow = new BMap.InfoWindow(message.join(''),{width:280});			map.openInfoWindow(infoWindow,point);						});//		BMapLib.EventWrapper.addDomListener(deptMapInfo.deptId, "mouseenter", function(){//			       //		}); 	};}//复制百度地图覆盖物方法PieChartOverlay.prototype = new BMap.Overlay();PieChartOverlay.prototype.initialize = function(map){	this._map = map;	var point = this._point;	var deptMapInfo = this._deptMapInfo;	//创建一个DIV元素并初始化该DIV的CSS	var div = this._div = document.createElement("div");	div.style.position = "absolute";	div.style.zIndex = BMap.Overlay.getZIndex(point.lat);	div.id = deptMapInfo.deptId;	div.style.height = "70px";	div.style.width = "70px";	div.style.lineHeight = "70px";	div.style.backgroundcolor= "red";	map.getPanes().labelPane.appendChild(div);	//在新建的DIV上初始化饼图  	var chart = this._createPieChatData();	//为该饼图绑定鼠标滑过事件	//this._bindingMouseenterEvent(chart);	return div;}PieChartOverlay.prototype.draw = function(){  var pixel = this._map.pointToOverlayPixel(this._point);  this._div.style.left = pixel.x -40 + "px";  this._div.style.top  = pixel.y -40 + "px";  }function OpenInfoWindowsEvent(carMapInfo,marker){	this._carMapInfo = carMapInfo;	this._marker = marker;	this._handlerUndefined = function(value){		return isNotNull(value) ? value : '暂无';	}}var vehicleMapMonitoringIndexMapModule = {	_mapObj : null,	_gc : null,	_drivingTrajectoryDataArr : null,	_trajectoryAlarmPointArr : null,	_tripParagraphArr : null,	_speedScaleArr : null,	initMap : function(divId){		this._gc = new BMap.Geocoder();		var map = this._mapObj = new BMap.Map(divId); //在百度地图容器中创建一个地图	    map.centerAndZoom("北京",5);     	    map.enableScrollWheelZoom(true);  	    map.addControl(new BMap.NavigationControl()); 	    map.setMinZoom(5);     	map.setMaxZoom(13);    	//获取当前IP所在城市并设置中心点为该城市    	function setCityCenter(result){			var cityName = result.name;			if(cityName && cityName != ''){				map.centerAndZoom(cityName,6);     			}		}		var myCity = new BMap.LocalCity();		myCity.get(setCityCenter);	},	setSpeedScaleArr : function(speedScaleArr){		this._speedScaleArr = speedScaleArr;	},	getSpeedScaleArr : function(){		return this._speedScaleArr;	},	clearOverlays : function (){		if(this._mapObj != null){			this._mapObj.clearOverlays();		}	},	setTrajectoryAlarmPointArr : function(trajectoryAlarmPointArr){		this._trajectoryAlarmPointArr = trajectoryAlarmPointArr;	},	getTrajectoryAlarmPointArr : function(trajectoryAlarmPointArr){		return this._trajectoryAlarmPointArr;	},	getDrivingTrajectoryDataArr : function(){		return this._drivingTrajectoryDataArr;	},	createPieChartOverlay : function(dataArr){		var map = this._mapObj;		var isSetCenter = false;		if(dataArr && (dataArr instanceof Array)){			for(var i in dataArr){				var deptMapInfo = dataArr[i];				if(isNotNull(deptMapInfo.lng) && isNotNull(deptMapInfo.lat) 						&& deptMapInfo.countCarFault >= 0 						&& deptMapInfo.countCarOff  >= 0						&& deptMapInfo.countCarOn  >= 0){					//alert(jsonToString(deptMapInfo));					if(!isSetCenter){						var pt = new BMap.Point(parseFloat(deptMapInfo.lng),parseFloat(deptMapInfo.lat));						map.setCenter(pt); 						isSetCenter = true;					}					var pieChartOverlayObj = new PieChartOverlay(deptMapInfo);		    		map.addOverlay(pieChartOverlayObj);				}			}		}		return isSetCenter;	},	createCarMaker : function(dataArr,isSetCenter){		var map = this._mapObj,gc = this._gc;		OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var carMapInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp_title">车牌号：'+handlerUndefined(carMapInfo.vehicleCode)+'</p>');			        message.push('<p class="Map_popUp"><span>工号：<font>'+handlerUndefined(carMapInfo.driverCode)+'</font></span>驾驶员：<font>'+handlerUndefined(carMapInfo.driverName)+'</font></p>');			        message.push('<p class="Map_popUp"><span>状态：<font>'+(carMapInfo.accState == 'ON' ? '点火' : '熄火')+'</font></span><em>速度：</em><font>'+(isNotNull(carMapInfo.speed) ? carMapInfo.speed : 0)+'(km/h)</font></p>');			        message.push('<p class="Map_popUp">大概地点：<font>'+address+'</font></p>');			        message.push('<p class="Map_popUp">上报时间：<font>'+carMapInfo.obdDateStr+'</font></p>');			        message.push("<p class='Map_popUp_btn'><a ");			        message.push("onClick=\"vehicleMapMonitoringIndexControl.showVehicleDrivingTrajectory('"+carMapInfo.vehicleId+"','"+carMapInfo.deviceCode+"')\">查看车辆当天轨迹</a></p>");			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:350});			        that.openInfoWindow(infoWindow);			      			       		       });			});		}		if(dataArr && (dataArr instanceof Array)){			for(var i=0; i < dataArr.length ;i++){				var carMapInfo = dataArr[i];				if(isNotNull(carMapInfo.lng) && isNotNull(carMapInfo.lat)){					//alert(jsonToString(carMapInfo));					var pt = new BMap.Point(parseFloat(carMapInfo.lng),parseFloat(carMapInfo.lat)),						degree = getCarDegree(carMapInfo.direction),						carIcon;					if(!isSetCenter){						map.setCenter(pt); 						isSetCenter = true;					}					if(carMapInfo.state == 4){//故障状态						carIcon = new BMap.Icon(ctx+"/img/map/car_alarm_"+degree+".png", new BMap.Size(35,35));					}else{						if(carMapInfo.accState == 'ON'){							carIcon = new BMap.Icon(ctx+"/img/map/car_driving_"+degree+".png", new BMap.Size(35,35));						}else{							carIcon = new BMap.Icon(ctx+"/img/map/car_stop_"+degree+".png", new BMap.Size(35,35));						}					}					var marker = new BMap.Marker(pt,{icon:carIcon});  					var label = new BMap.Label(carMapInfo.vehicleCode, {						position : pt,    // 指定文本标注所在的地理位置		    			offset   : new BMap.Size(30,10)    //设置文本偏移量						});  // 创建文本标注对象					label.setStyle({						 color : "red",						 fontSize : "12px",						 height : "14px",												 fontFamily:"微软雅黑"					 });	         		            marker.setLabel(label);		            if(carMapInfo.state != 4 && carMapInfo.accState == 'ON'){		            	marker.setTop(true); 		            }		            map.addOverlay(marker);		            map.setZoom(12);		            var eventObj = new OpenInfoWindowsEvent(carMapInfo,marker);					eventObj.blindOpenInfoWindowsEvent();				}			}		}	},	handlerDrivingTrajectoryDataArr : function(dataArr){		var filteredPointInfoArr = new Array(),		    tripParagraphPoints = new Array(),			tripParagraphArr = new Array(),			lastPointInfo = null;		for(var i=0; i < dataArr.length; i++){			var pointInfo = dataArr[i];			//过滤熄火的点			if(pointInfo.accStatus == 1){				filteredPointInfoArr.push(pointInfo);			}			//分割点熄火时间段的点			if(lastPointInfo == null){				var firstPointInfoDate = dateFormat(pointInfo.obdDate,'yyyy-MM-dd') + ' 00:00:00';				//判断第一个点不是当天的 00:00:00				if(pointInfo.obdDate != firstPointInfoDate){					//以第一个点为基准，复制一个新的点对象					var firstPointInfo = $.extend({},pointInfo);					//新的点的时间改为当天的 00:00:00。					firstPointInfo.obdDate = firstPointInfoDate;					//把新复制的第一个点的点火状态改为熄火					firstPointInfo.accStatus = 0;					//alert(jsonToString(firstPointInfo));					//以当天时间的 00:00:00的点作为第一段时间分段的第一个点					tripParagraphPoints.push(firstPointInfo);					//判断第一个点是否是点火状态					if(pointInfo.accStatus == 1){//如果是，则以新复制的点和第一个点为结尾组成第一段时间段						tripParagraphPoints.push(pointInfo);						tripParagraphArr.push(tripParagraphPoints);						tripParagraphPoints = new Array();					}				}				tripParagraphPoints.push(pointInfo);			}else{				if(i == (dataArr.length - 1)){					var lastPointInfoDate = dateFormat(pointInfo.obdDate,'yyyy-MM-dd') + ' 23:59:59';					//判断最后一个点不是当天的 23:59:59					if(pointInfo.obdDate != lastPointInfoDate){						var lastPointInfo = $.extend({},pointInfo);						//新的点的时间改为当天的 23:59:59						lastPointInfo.obdDate = lastPointInfoDate;						//把新复制的点火状态改为熄火						lastPointInfo.accStatus = 0;						if(pointInfo.accStatus == 1){							tripParagraphPoints.push(pointInfo);							tripParagraphArr.push(tripParagraphPoints);							tripParagraphPoints = new Array();							var secondLastPointInfo = $.extend({},pointInfo);							secondLastPointInfo.accStatus = 0;							tripParagraphPoints.push(secondLastPointInfo);						}						tripParagraphPoints.push(lastPointInfo);						tripParagraphArr.push(tripParagraphPoints);					}else{						tripParagraphPoints.push(pointInfo);						tripParagraphArr.push(tripParagraphPoints);					}					lastPointInfo = null;				}else{					if(pointInfo.accStatus == lastPointInfo.accStatus){						tripParagraphPoints.push(pointInfo);					}else{						tripParagraphPoints.push(pointInfo);						tripParagraphArr.push(tripParagraphPoints);						tripParagraphPoints = new Array();						tripParagraphPoints.push(pointInfo);					}				}			}			lastPointInfo = pointInfo;		}		this._drivingTrajectoryDataArr = filteredPointInfoArr;		this._tripParagraphArr = tripParagraphArr;	},	getTripParagraphArr : function(){		return this._tripParagraphArr;	},	drawingAllDrivingTrajectory : function(){		this._drawingMapTrajectoryLine(this._drivingTrajectoryDataArr);		this._drawingMapTrajectoryMarker(this._drivingTrajectoryDataArr);		return new TrajectoryRunning(this._drivingTrajectoryDataArr,this._mapObj);	},	drawingDrivingTrajectoryParagraph : function(index){		if(typeof index != 'number'){			index = parseInt(index);		}		var drivingTrajectoryParagraph = this._tripParagraphArr[index];		this._drawingMapTrajectoryLine(drivingTrajectoryParagraph);		this._drawingMapTrajectoryMarker(drivingTrajectoryParagraph);		return new TrajectoryRunning(drivingTrajectoryParagraph,this._mapObj);	},	drawingDrivingTrajectoryByTime : function(startDate,endDate){		var	allPointList = this._drivingTrajectoryDataArr;		var drivingTrajectoryPointList = new Array();		startDate = startDate.formatDate();		endDate = endDate.formatDate();		for(var i = 0;i < allPointList.length; i++){			var pointInfo = allPointList[i];			var pointDate = pointInfo.obdDate.formatDate();			if(pointDate >= startDate && pointDate <= endDate){				drivingTrajectoryPointList.push(pointInfo);			}		}		this._drawingMapTrajectoryLine(drivingTrajectoryPointList);		this._drawingMapTrajectoryMarker(drivingTrajectoryPointList);		return new TrajectoryRunning(drivingTrajectoryPointList,this._mapObj);	},	_drawingMapTrajectoryLine : function(pointInfoArr){		function TempLinePointArray(){			this._type = null;			this._pointArray = new Array();		}		TempLinePointArray.prototype = {			push : function(lng,lat){				var point = new BMap.Point(lng,lat);				this._pointArray.push(point);			},			size : function(){				return this._pointArray.length;			},			setType : function(type){				this._type = type;			},			getType : function(){				return this._type;			},			getArray : function(){				return this._pointArray;			}		};		var map = this._mapObj,			speedScaleArr = this._speedScaleArr,			mapPolylineArr = new Array(),			tempLinePointArr = new TempLinePointArray();		//判断该点速度属于哪个车速刻度范围		function getPointSpeedScaleType(speed){			var fristScale = parseInt(speedScaleArr[0]),			  	secondScale = parseInt(speedScaleArr[1]),				type = 'minType';			if(speed >= fristScale && speed < secondScale){				type = 'centerType';			}else if(speed >= secondScale){				type = 'maxType';			}			return type;		}		//根据车速刻度划分地图线路颜色		for(var i=0;i < pointInfoArr.length;i++){			var pointInfo = pointInfoArr[i];			var pointType = getPointSpeedScaleType(pointInfo.speed);			if(tempLinePointArr.size() == 0){//判断是否为线的第一个点				tempLinePointArr.push(pointInfo.lng,pointInfo.lat);				tempLinePointArr.setType(pointType);			}else if(i == (pointInfoArr.length - 1)){				tempLinePointArr.push(pointInfo.lng,pointInfo.lat);				var polylineObj = new BMap.Polyline(tempLinePointArr.getArray(), {strokeColor:strokeColor, strokeWeight:4, strokeOpacity:0.8});				mapPolylineArr.push(polylineObj);			}else{				if(tempLinePointArr.getType() == pointType){					tempLinePointArr.push(pointInfo.lng,pointInfo.lat);				}else{					var strokeColor = '#00ff00';					if(tempLinePointArr.getType() == 'centerType'){						strokeColor = '#0000ff';					}else if(tempLinePointArr.getType() == 'maxType'){						strokeColor = '#e40303';					}					tempLinePointArr.push(pointInfo.lng,pointInfo.lat);					var polylineObj = new BMap.Polyline(tempLinePointArr.getArray(), {strokeColor:strokeColor, strokeWeight:4, strokeOpacity:0.8});					mapPolylineArr.push(polylineObj);					tempLinePointArr = new TempLinePointArray();					tempLinePointArr.push(pointInfo.lng,pointInfo.lat);					tempLinePointArr.setType(pointType);				}			}		}		for(var i=0;i < mapPolylineArr.length;i++){			map.addOverlay(mapPolylineArr[i]);		}	},	_drawingMapTrajectoryMarker : function(pointInfoArr){		OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var carMapInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp">速度：<font>'+(isNotNull(carMapInfo.speed) ? carMapInfo.speed : 0)+'(km/h)</font></p>');			        message.push('<p class="Map_popUp">大概地点：<font>'+address+'</font></p>');			        message.push('<p class="Map_popUp">定位时间：<font>'+handlerUndefined(carMapInfo.obdDate)+'</font></p>');			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:330});			        that.openInfoWindow(infoWindow);			      			       });			});		}		var map = this._mapObj,			gc = this._gc,			fristPointDate,			lastPointDate;		for(var i=0; i < pointInfoArr.length; i++){			var pointInfo = pointInfoArr[i],				markerIcon = null,				point = new BMap.Point(pointInfo.lng,pointInfo.lat);			if(i == 0){				map.setCenter(point);				map.setZoom(13);				markerIcon = new BMap.Icon(ctx + "/img/map/start_icon.png", new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});				fristPointDate = pointInfo.obdDate;			}else if(i == (pointInfoArr.length - 1)){				markerIcon = new BMap.Icon(ctx + "/img/map/end_icon.png", new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)});				lastPointDate = pointInfo.obdDate;			}else if(i % 20 == 0){				markerIcon = new BMap.Icon(ctx + "/img/map/route_direction_" + getCarDegree(pointInfo.direction) + ".png", 								new BMap.Size(12,12),{anchor: new BMap.Size(6, 6)});			}			if(markerIcon != null){				var marker = new BMap.Marker(point,{icon:markerIcon});				map.addOverlay(marker); 				var eventObj = new OpenInfoWindowsEvent(pointInfo,marker);				eventObj.blindOpenInfoWindowsEvent();			}		}		if(pointInfoArr.length > 0){			this.drivingTrajectoryAlarmPoint(fristPointDate,lastPointDate);		}	},	drivingTrajectoryAlarmPoint : function(beginDate,endDate){		var map = this._mapObj,gc = this._gc;		var dataArr = this._trajectoryAlarmPointArr;		beginDate = (beginDate instanceof Date) ? beginDate.getTime():  beginDate.formatDate().getTime();		endDate = (endDate instanceof Date) ? endDate.getTime() : endDate.formatDate().getTime();		OpenInfoWindowsEvent.prototype.blindOpenInfoWindowsEvent = function(){			var handlerUndefined = this._handlerUndefined;			var alarmInfo = this._carMapInfo;			var marker = this._marker;			marker.addEventListener("click", function(e){   				var that = this;			    gc.getLocation(that.getPosition(), function(rs){			        var addComp = rs.addressComponents;			        var address;			        if(addComp.province==addComp.city){			        	address = addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }else{			        	address = addComp.province+addComp.city+addComp.district+addComp.street+addComp.streetNumber;			        }			        var message = new Array();			        message.push('<p class="Map_popUp"><span>工号：<font>'+handlerUndefined(alarmInfo.driverCode)+'</font></span>驾驶员：<font>'+handlerUndefined(alarmInfo.driverName)+'</font></p>');			        message.push('<p class="Map_popUp">告警类型：<font>'+handlerUndefined(alarmInfo.alarmTypeName)+'</font></p>');			        message.push('<p class="Map_popUp">大概地点：<font>'+address+'</font></p>');			        message.push('<p class="Map_popUp">告警时间：<font>'+handlerUndefined(alarmInfo.alarmTime)+'</font></p>');			        var infoWindow = new BMap.InfoWindow(message.join(''),{width:300});			        that.openInfoWindow(infoWindow);			      			       		       });			});		}		for(var i=0;i < dataArr.length; i++){			var alarmInfo = dataArr[i];			var alarmTime = alarmInfo.alarmTime.formatDate().getTime();			var iconSrc = ctx;			if(alarmTime >= beginDate && alarmTime <= endDate){				switch(alarmInfo.alarmTypeCode){					case '1004002':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_cx.png';						break;					case '1004003':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_dx.png';						break;					case '1004001':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jd.png';						break;					case '9002':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jj.png';						break;					case '9001':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jx.png';						break;					case '9003':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_jz.png';						break;					case '9004':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_pl.png';						break;					case '269':						iconSrc += '/img/vehicleMapMonitoring/timebar-icon/red_kd.png';						break;				}				var markerIcon = new BMap.Icon(iconSrc, new BMap.Size(23,29),{anchor: new BMap.Size(12, 14)}),				point = new BMap.Point(alarmInfo.lng,alarmInfo.lat);				var marker = new BMap.Marker(point,{icon:markerIcon});				map.addOverlay(marker); 				var eventObj = new OpenInfoWindowsEvent(alarmInfo,marker);				eventObj.blindOpenInfoWindowsEvent();			}		}	}}